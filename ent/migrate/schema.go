// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BookmarksColumns holds the columns for the "bookmarks" table.
	BookmarksColumns = []*schema.Column{
		{Name: "bookmarked_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "post_id", Type: field.TypeInt},
	}
	// BookmarksTable holds the schema information for the "bookmarks" table.
	BookmarksTable = &schema.Table{
		Name:       "bookmarks",
		Columns:    BookmarksColumns,
		PrimaryKey: []*schema.Column{BookmarksColumns[1], BookmarksColumns[2]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bookmarks_users_user",
				Columns:    []*schema.Column{BookmarksColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "bookmarks_posts_post",
				Columns:    []*schema.Column{BookmarksColumns[2]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// HashtagsColumns holds the columns for the "hashtags" table.
	HashtagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Size: 2147483647},
	}
	// HashtagsTable holds the schema information for the "hashtags" table.
	HashtagsTable = &schema.Table{
		Name:       "hashtags",
		Columns:    HashtagsColumns,
		PrimaryKey: []*schema.Column{HashtagsColumns[0]},
	}
	// LikesColumns holds the columns for the "likes" table.
	LikesColumns = []*schema.Column{
		{Name: "liked_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "post_id", Type: field.TypeInt},
	}
	// LikesTable holds the schema information for the "likes" table.
	LikesTable = &schema.Table{
		Name:       "likes",
		Columns:    LikesColumns,
		PrimaryKey: []*schema.Column{LikesColumns[1], LikesColumns[2]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "likes_users_user",
				Columns:    []*schema.Column{LikesColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "likes_posts_post",
				Columns:    []*schema.Column{LikesColumns[2]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Size: 2147483647},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"letter", "praise"}},
		{Name: "spoiled", Type: field.TypeBool},
		{Name: "thumbnail", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "post_category", Type: field.TypeInt},
		{Name: "user_posts", Type: field.TypeInt},
		{Name: "work_posts", Type: field.TypeInt},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_categories_category",
				Columns:    []*schema.Column{PostsColumns[8]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "posts_works_posts",
				Columns:    []*schema.Column{PostsColumns[10]},
				RefColumns: []*schema.Column{WorksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "profile", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// WorksColumns holds the columns for the "works" table.
	WorksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Size: 2147483647},
		{Name: "thumbnail", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// WorksTable holds the schema information for the "works" table.
	WorksTable = &schema.Table{
		Name:       "works",
		Columns:    WorksColumns,
		PrimaryKey: []*schema.Column{WorksColumns[0]},
	}
	// PostHashtagsColumns holds the columns for the "post_hashtags" table.
	PostHashtagsColumns = []*schema.Column{
		{Name: "post_id", Type: field.TypeInt},
		{Name: "hashtag_id", Type: field.TypeInt},
	}
	// PostHashtagsTable holds the schema information for the "post_hashtags" table.
	PostHashtagsTable = &schema.Table{
		Name:       "post_hashtags",
		Columns:    PostHashtagsColumns,
		PrimaryKey: []*schema.Column{PostHashtagsColumns[0], PostHashtagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "post_hashtags_post_id",
				Columns:    []*schema.Column{PostHashtagsColumns[0]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "post_hashtags_hashtag_id",
				Columns:    []*schema.Column{PostHashtagsColumns[1]},
				RefColumns: []*schema.Column{HashtagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BookmarksTable,
		CategoriesTable,
		HashtagsTable,
		LikesTable,
		PostsTable,
		UsersTable,
		WorksTable,
		PostHashtagsTable,
	}
)

func init() {
	BookmarksTable.ForeignKeys[0].RefTable = UsersTable
	BookmarksTable.ForeignKeys[1].RefTable = PostsTable
	LikesTable.ForeignKeys[0].RefTable = UsersTable
	LikesTable.ForeignKeys[1].RefTable = PostsTable
	PostsTable.ForeignKeys[0].RefTable = CategoriesTable
	PostsTable.ForeignKeys[1].RefTable = UsersTable
	PostsTable.ForeignKeys[2].RefTable = WorksTable
	PostHashtagsTable.ForeignKeys[0].RefTable = PostsTable
	PostHashtagsTable.ForeignKeys[1].RefTable = HashtagsTable
}
