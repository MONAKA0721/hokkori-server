// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldProfile holds the string denoting the profile field in the database.
	FieldProfile = "profile"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldInterests holds the string denoting the interests field in the database.
	FieldInterests = "interests"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeLikedPosts holds the string denoting the liked_posts edge name in mutations.
	EdgeLikedPosts = "liked_posts"
	// EdgeBookmarkedPosts holds the string denoting the bookmarked_posts edge name in mutations.
	EdgeBookmarkedPosts = "bookmarked_posts"
	// EdgeFollowers holds the string denoting the followers edge name in mutations.
	EdgeFollowers = "followers"
	// EdgeFollowing holds the string denoting the following edge name in mutations.
	EdgeFollowing = "following"
	// EdgeDrafts holds the string denoting the drafts edge name in mutations.
	EdgeDrafts = "drafts"
	// EdgeLikes holds the string denoting the likes edge name in mutations.
	EdgeLikes = "likes"
	// EdgeBookmarks holds the string denoting the bookmarks edge name in mutations.
	EdgeBookmarks = "bookmarks"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "user_posts"
	// LikedPostsTable is the table that holds the liked_posts relation/edge. The primary key declared below.
	LikedPostsTable = "likes"
	// LikedPostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	LikedPostsInverseTable = "posts"
	// BookmarkedPostsTable is the table that holds the bookmarked_posts relation/edge. The primary key declared below.
	BookmarkedPostsTable = "bookmarks"
	// BookmarkedPostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	BookmarkedPostsInverseTable = "posts"
	// FollowersTable is the table that holds the followers relation/edge. The primary key declared below.
	FollowersTable = "user_following"
	// FollowingTable is the table that holds the following relation/edge. The primary key declared below.
	FollowingTable = "user_following"
	// DraftsTable is the table that holds the drafts relation/edge.
	DraftsTable = "drafts"
	// DraftsInverseTable is the table name for the Draft entity.
	// It exists in this package in order to avoid circular dependency with the "draft" package.
	DraftsInverseTable = "drafts"
	// DraftsColumn is the table column denoting the drafts relation/edge.
	DraftsColumn = "user_drafts"
	// LikesTable is the table that holds the likes relation/edge.
	LikesTable = "likes"
	// LikesInverseTable is the table name for the Like entity.
	// It exists in this package in order to avoid circular dependency with the "like" package.
	LikesInverseTable = "likes"
	// LikesColumn is the table column denoting the likes relation/edge.
	LikesColumn = "user_id"
	// BookmarksTable is the table that holds the bookmarks relation/edge.
	BookmarksTable = "bookmarks"
	// BookmarksInverseTable is the table name for the Bookmark entity.
	// It exists in this package in order to avoid circular dependency with the "bookmark" package.
	BookmarksInverseTable = "bookmarks"
	// BookmarksColumn is the table column denoting the bookmarks relation/edge.
	BookmarksColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldUsername,
	FieldProfile,
	FieldAvatarURL,
	FieldAge,
	FieldGender,
	FieldInterests,
}

var (
	// LikedPostsPrimaryKey and LikedPostsColumn2 are the table columns denoting the
	// primary key for the liked_posts relation (M2M).
	LikedPostsPrimaryKey = []string{"user_id", "post_id"}
	// BookmarkedPostsPrimaryKey and BookmarkedPostsColumn2 are the table columns denoting the
	// primary key for the bookmarked_posts relation (M2M).
	BookmarkedPostsPrimaryKey = []string{"user_id", "post_id"}
	// FollowersPrimaryKey and FollowersColumn2 are the table columns denoting the
	// primary key for the followers relation (M2M).
	FollowersPrimaryKey = []string{"user_id", "follower_id"}
	// FollowingPrimaryKey and FollowingColumn2 are the table columns denoting the
	// primary key for the following relation (M2M).
	FollowingPrimaryKey = []string{"user_id", "follower_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
