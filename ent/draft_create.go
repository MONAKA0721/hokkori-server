// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MONAKA0721/hokkori/ent/category"
	"github.com/MONAKA0721/hokkori/ent/draft"
	"github.com/MONAKA0721/hokkori/ent/hashtag"
	"github.com/MONAKA0721/hokkori/ent/user"
	"github.com/MONAKA0721/hokkori/ent/work"
)

// DraftCreate is the builder for creating a Draft entity.
type DraftCreate struct {
	config
	mutation *DraftMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dc *DraftCreate) SetCreateTime(t time.Time) *DraftCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DraftCreate) SetNillableCreateTime(t *time.Time) *DraftCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetUpdateTime sets the "update_time" field.
func (dc *DraftCreate) SetUpdateTime(t time.Time) *DraftCreate {
	dc.mutation.SetUpdateTime(t)
	return dc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dc *DraftCreate) SetNillableUpdateTime(t *time.Time) *DraftCreate {
	if t != nil {
		dc.SetUpdateTime(*t)
	}
	return dc
}

// SetPraiseTitle sets the "praise_title" field.
func (dc *DraftCreate) SetPraiseTitle(s string) *DraftCreate {
	dc.mutation.SetPraiseTitle(s)
	return dc
}

// SetLetterTitle sets the "letter_title" field.
func (dc *DraftCreate) SetLetterTitle(s string) *DraftCreate {
	dc.mutation.SetLetterTitle(s)
	return dc
}

// SetPraiseContent sets the "praise_content" field.
func (dc *DraftCreate) SetPraiseContent(s string) *DraftCreate {
	dc.mutation.SetPraiseContent(s)
	return dc
}

// SetLetterContent sets the "letter_content" field.
func (dc *DraftCreate) SetLetterContent(s string) *DraftCreate {
	dc.mutation.SetLetterContent(s)
	return dc
}

// SetPraiseSpoiled sets the "praise_spoiled" field.
func (dc *DraftCreate) SetPraiseSpoiled(b bool) *DraftCreate {
	dc.mutation.SetPraiseSpoiled(b)
	return dc
}

// SetLetterSpoiled sets the "letter_spoiled" field.
func (dc *DraftCreate) SetLetterSpoiled(b bool) *DraftCreate {
	dc.mutation.SetLetterSpoiled(b)
	return dc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (dc *DraftCreate) SetOwnerID(id int) *DraftCreate {
	dc.mutation.SetOwnerID(id)
	return dc
}

// SetOwner sets the "owner" edge to the User entity.
func (dc *DraftCreate) SetOwner(u *User) *DraftCreate {
	return dc.SetOwnerID(u.ID)
}

// AddHashtagIDs adds the "hashtags" edge to the Hashtag entity by IDs.
func (dc *DraftCreate) AddHashtagIDs(ids ...int) *DraftCreate {
	dc.mutation.AddHashtagIDs(ids...)
	return dc
}

// AddHashtags adds the "hashtags" edges to the Hashtag entity.
func (dc *DraftCreate) AddHashtags(h ...*Hashtag) *DraftCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dc.AddHashtagIDs(ids...)
}

// SetWorkID sets the "work" edge to the Work entity by ID.
func (dc *DraftCreate) SetWorkID(id int) *DraftCreate {
	dc.mutation.SetWorkID(id)
	return dc
}

// SetNillableWorkID sets the "work" edge to the Work entity by ID if the given value is not nil.
func (dc *DraftCreate) SetNillableWorkID(id *int) *DraftCreate {
	if id != nil {
		dc = dc.SetWorkID(*id)
	}
	return dc
}

// SetWork sets the "work" edge to the Work entity.
func (dc *DraftCreate) SetWork(w *Work) *DraftCreate {
	return dc.SetWorkID(w.ID)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (dc *DraftCreate) SetCategoryID(id int) *DraftCreate {
	dc.mutation.SetCategoryID(id)
	return dc
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (dc *DraftCreate) SetNillableCategoryID(id *int) *DraftCreate {
	if id != nil {
		dc = dc.SetCategoryID(*id)
	}
	return dc
}

// SetCategory sets the "category" edge to the Category entity.
func (dc *DraftCreate) SetCategory(c *Category) *DraftCreate {
	return dc.SetCategoryID(c.ID)
}

// Mutation returns the DraftMutation object of the builder.
func (dc *DraftCreate) Mutation() *DraftMutation {
	return dc.mutation
}

// Save creates the Draft in the database.
func (dc *DraftCreate) Save(ctx context.Context) (*Draft, error) {
	var (
		err  error
		node *Draft
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Draft)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DraftMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DraftCreate) SaveX(ctx context.Context) *Draft {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DraftCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DraftCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DraftCreate) defaults() {
	if _, ok := dc.mutation.CreateTime(); !ok {
		v := draft.DefaultCreateTime()
		dc.mutation.SetCreateTime(v)
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		v := draft.DefaultUpdateTime()
		dc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DraftCreate) check() error {
	if _, ok := dc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Draft.create_time"`)}
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Draft.update_time"`)}
	}
	if _, ok := dc.mutation.PraiseTitle(); !ok {
		return &ValidationError{Name: "praise_title", err: errors.New(`ent: missing required field "Draft.praise_title"`)}
	}
	if _, ok := dc.mutation.LetterTitle(); !ok {
		return &ValidationError{Name: "letter_title", err: errors.New(`ent: missing required field "Draft.letter_title"`)}
	}
	if _, ok := dc.mutation.PraiseContent(); !ok {
		return &ValidationError{Name: "praise_content", err: errors.New(`ent: missing required field "Draft.praise_content"`)}
	}
	if _, ok := dc.mutation.LetterContent(); !ok {
		return &ValidationError{Name: "letter_content", err: errors.New(`ent: missing required field "Draft.letter_content"`)}
	}
	if _, ok := dc.mutation.PraiseSpoiled(); !ok {
		return &ValidationError{Name: "praise_spoiled", err: errors.New(`ent: missing required field "Draft.praise_spoiled"`)}
	}
	if _, ok := dc.mutation.LetterSpoiled(); !ok {
		return &ValidationError{Name: "letter_spoiled", err: errors.New(`ent: missing required field "Draft.letter_spoiled"`)}
	}
	if _, ok := dc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Draft.owner"`)}
	}
	return nil
}

func (dc *DraftCreate) sqlSave(ctx context.Context) (*Draft, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DraftCreate) createSpec() (*Draft, *sqlgraph.CreateSpec) {
	var (
		_node = &Draft{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: draft.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: draft.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draft.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := dc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: draft.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := dc.mutation.PraiseTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldPraiseTitle,
		})
		_node.PraiseTitle = value
	}
	if value, ok := dc.mutation.LetterTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldLetterTitle,
		})
		_node.LetterTitle = value
	}
	if value, ok := dc.mutation.PraiseContent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldPraiseContent,
		})
		_node.PraiseContent = value
	}
	if value, ok := dc.mutation.LetterContent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: draft.FieldLetterContent,
		})
		_node.LetterContent = value
	}
	if value, ok := dc.mutation.PraiseSpoiled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: draft.FieldPraiseSpoiled,
		})
		_node.PraiseSpoiled = value
	}
	if value, ok := dc.mutation.LetterSpoiled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: draft.FieldLetterSpoiled,
		})
		_node.LetterSpoiled = value
	}
	if nodes := dc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   draft.OwnerTable,
			Columns: []string{draft.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_drafts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.HashtagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   draft.HashtagsTable,
			Columns: draft.HashtagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hashtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.WorkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   draft.WorkTable,
			Columns: []string{draft.WorkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: work.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.work_drafts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   draft.CategoryTable,
			Columns: []string{draft.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.draft_category = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DraftCreateBulk is the builder for creating many Draft entities in bulk.
type DraftCreateBulk struct {
	config
	builders []*DraftCreate
}

// Save creates the Draft entities in the database.
func (dcb *DraftCreateBulk) Save(ctx context.Context) ([]*Draft, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Draft, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DraftMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DraftCreateBulk) SaveX(ctx context.Context) []*Draft {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DraftCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DraftCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
