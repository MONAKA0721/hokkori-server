// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/MONAKA0721/hokkori/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Profile holds the value of the "profile" field.
	Profile string `json:"profile,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL string `json:"avatar_url,omitempty"`
	// 1:10代 2:20代 3:30代 4:40代 5:50代 6:60代以上
	Age int `json:"age,omitempty"`
	// 1:男 2:女 3:選択しない
	Gender int `json:"gender,omitempty"`
	// 1:ポケットモンスター 2:どうぶつの森 3:スーパーマリオ 4:スプラトゥーン 5:ゼルダの伝説 6:モンスターハンター 7:ドラゴンクエスト 8:ファイナルファンタジー 9:ニーア 10:桃太郎電鉄 11:パワプロ 12:メタルギア 13:マインクラフト 14:ソニック
	Interests []int `json:"interests,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// LikedPosts holds the value of the liked_posts edge.
	LikedPosts []*Post `json:"liked_posts,omitempty"`
	// BookmarkedPosts holds the value of the bookmarked_posts edge.
	BookmarkedPosts []*Post `json:"bookmarked_posts,omitempty"`
	// Followers holds the value of the followers edge.
	Followers []*User `json:"followers,omitempty"`
	// Following holds the value of the following edge.
	Following []*User `json:"following,omitempty"`
	// Drafts holds the value of the drafts edge.
	Drafts []*Draft `json:"drafts,omitempty"`
	// Likes holds the value of the likes edge.
	Likes []*Like `json:"likes,omitempty"`
	// Bookmarks holds the value of the bookmarks edge.
	Bookmarks []*Bookmark `json:"bookmarks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [6]*int
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// LikedPostsOrErr returns the LikedPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedPostsOrErr() ([]*Post, error) {
	if e.loadedTypes[1] {
		return e.LikedPosts, nil
	}
	return nil, &NotLoadedError{edge: "liked_posts"}
}

// BookmarkedPostsOrErr returns the BookmarkedPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BookmarkedPostsOrErr() ([]*Post, error) {
	if e.loadedTypes[2] {
		return e.BookmarkedPosts, nil
	}
	return nil, &NotLoadedError{edge: "bookmarked_posts"}
}

// FollowersOrErr returns the Followers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowersOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Followers, nil
	}
	return nil, &NotLoadedError{edge: "followers"}
}

// FollowingOrErr returns the Following value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowingOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Following, nil
	}
	return nil, &NotLoadedError{edge: "following"}
}

// DraftsOrErr returns the Drafts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DraftsOrErr() ([]*Draft, error) {
	if e.loadedTypes[5] {
		return e.Drafts, nil
	}
	return nil, &NotLoadedError{edge: "drafts"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[6] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// BookmarksOrErr returns the Bookmarks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BookmarksOrErr() ([]*Bookmark, error) {
	if e.loadedTypes[7] {
		return e.Bookmarks, nil
	}
	return nil, &NotLoadedError{edge: "bookmarks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldInterests:
			values[i] = new([]byte)
		case user.FieldID, user.FieldAge, user.FieldGender:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldUsername, user.FieldProfile, user.FieldAvatarURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile", values[i])
			} else if value.Valid {
				u.Profile = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = value.String
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				u.Age = int(value.Int64)
			}
		case user.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				u.Gender = int(value.Int64)
			}
		case user.FieldInterests:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field interests", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Interests); err != nil {
					return fmt.Errorf("unmarshal field interests: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryPosts queries the "posts" edge of the User entity.
func (u *User) QueryPosts() *PostQuery {
	return (&UserClient{config: u.config}).QueryPosts(u)
}

// QueryLikedPosts queries the "liked_posts" edge of the User entity.
func (u *User) QueryLikedPosts() *PostQuery {
	return (&UserClient{config: u.config}).QueryLikedPosts(u)
}

// QueryBookmarkedPosts queries the "bookmarked_posts" edge of the User entity.
func (u *User) QueryBookmarkedPosts() *PostQuery {
	return (&UserClient{config: u.config}).QueryBookmarkedPosts(u)
}

// QueryFollowers queries the "followers" edge of the User entity.
func (u *User) QueryFollowers() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowers(u)
}

// QueryFollowing queries the "following" edge of the User entity.
func (u *User) QueryFollowing() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowing(u)
}

// QueryDrafts queries the "drafts" edge of the User entity.
func (u *User) QueryDrafts() *DraftQuery {
	return (&UserClient{config: u.config}).QueryDrafts(u)
}

// QueryLikes queries the "likes" edge of the User entity.
func (u *User) QueryLikes() *LikeQuery {
	return (&UserClient{config: u.config}).QueryLikes(u)
}

// QueryBookmarks queries the "bookmarks" edge of the User entity.
func (u *User) QueryBookmarks() *BookmarkQuery {
	return (&UserClient{config: u.config}).QueryBookmarks(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("profile=")
	builder.WriteString(u.Profile)
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(u.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", u.Gender))
	builder.WriteString(", ")
	builder.WriteString("interests=")
	builder.WriteString(fmt.Sprintf("%v", u.Interests))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
