// Code generated by ent, DO NOT EDIT.

package draft

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/MONAKA0721/hokkori/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// PraiseTitle applies equality check predicate on the "praise_title" field. It's identical to PraiseTitleEQ.
func PraiseTitle(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPraiseTitle), v))
	})
}

// LetterTitle applies equality check predicate on the "letter_title" field. It's identical to LetterTitleEQ.
func LetterTitle(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLetterTitle), v))
	})
}

// PraiseContent applies equality check predicate on the "praise_content" field. It's identical to PraiseContentEQ.
func PraiseContent(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPraiseContent), v))
	})
}

// LetterContent applies equality check predicate on the "letter_content" field. It's identical to LetterContentEQ.
func LetterContent(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLetterContent), v))
	})
}

// PraiseSpoiled applies equality check predicate on the "praise_spoiled" field. It's identical to PraiseSpoiledEQ.
func PraiseSpoiled(v bool) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPraiseSpoiled), v))
	})
}

// LetterSpoiled applies equality check predicate on the "letter_spoiled" field. It's identical to LetterSpoiledEQ.
func LetterSpoiled(v bool) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLetterSpoiled), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// PraiseTitleEQ applies the EQ predicate on the "praise_title" field.
func PraiseTitleEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleNEQ applies the NEQ predicate on the "praise_title" field.
func PraiseTitleNEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleIn applies the In predicate on the "praise_title" field.
func PraiseTitleIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPraiseTitle), v...))
	})
}

// PraiseTitleNotIn applies the NotIn predicate on the "praise_title" field.
func PraiseTitleNotIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPraiseTitle), v...))
	})
}

// PraiseTitleGT applies the GT predicate on the "praise_title" field.
func PraiseTitleGT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleGTE applies the GTE predicate on the "praise_title" field.
func PraiseTitleGTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleLT applies the LT predicate on the "praise_title" field.
func PraiseTitleLT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleLTE applies the LTE predicate on the "praise_title" field.
func PraiseTitleLTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleContains applies the Contains predicate on the "praise_title" field.
func PraiseTitleContains(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleHasPrefix applies the HasPrefix predicate on the "praise_title" field.
func PraiseTitleHasPrefix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleHasSuffix applies the HasSuffix predicate on the "praise_title" field.
func PraiseTitleHasSuffix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleEqualFold applies the EqualFold predicate on the "praise_title" field.
func PraiseTitleEqualFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPraiseTitle), v))
	})
}

// PraiseTitleContainsFold applies the ContainsFold predicate on the "praise_title" field.
func PraiseTitleContainsFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPraiseTitle), v))
	})
}

// LetterTitleEQ applies the EQ predicate on the "letter_title" field.
func LetterTitleEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleNEQ applies the NEQ predicate on the "letter_title" field.
func LetterTitleNEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleIn applies the In predicate on the "letter_title" field.
func LetterTitleIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLetterTitle), v...))
	})
}

// LetterTitleNotIn applies the NotIn predicate on the "letter_title" field.
func LetterTitleNotIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLetterTitle), v...))
	})
}

// LetterTitleGT applies the GT predicate on the "letter_title" field.
func LetterTitleGT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleGTE applies the GTE predicate on the "letter_title" field.
func LetterTitleGTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleLT applies the LT predicate on the "letter_title" field.
func LetterTitleLT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleLTE applies the LTE predicate on the "letter_title" field.
func LetterTitleLTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleContains applies the Contains predicate on the "letter_title" field.
func LetterTitleContains(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleHasPrefix applies the HasPrefix predicate on the "letter_title" field.
func LetterTitleHasPrefix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleHasSuffix applies the HasSuffix predicate on the "letter_title" field.
func LetterTitleHasSuffix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleEqualFold applies the EqualFold predicate on the "letter_title" field.
func LetterTitleEqualFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLetterTitle), v))
	})
}

// LetterTitleContainsFold applies the ContainsFold predicate on the "letter_title" field.
func LetterTitleContainsFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLetterTitle), v))
	})
}

// PraiseContentEQ applies the EQ predicate on the "praise_content" field.
func PraiseContentEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentNEQ applies the NEQ predicate on the "praise_content" field.
func PraiseContentNEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentIn applies the In predicate on the "praise_content" field.
func PraiseContentIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPraiseContent), v...))
	})
}

// PraiseContentNotIn applies the NotIn predicate on the "praise_content" field.
func PraiseContentNotIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPraiseContent), v...))
	})
}

// PraiseContentGT applies the GT predicate on the "praise_content" field.
func PraiseContentGT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentGTE applies the GTE predicate on the "praise_content" field.
func PraiseContentGTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentLT applies the LT predicate on the "praise_content" field.
func PraiseContentLT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentLTE applies the LTE predicate on the "praise_content" field.
func PraiseContentLTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentContains applies the Contains predicate on the "praise_content" field.
func PraiseContentContains(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentHasPrefix applies the HasPrefix predicate on the "praise_content" field.
func PraiseContentHasPrefix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentHasSuffix applies the HasSuffix predicate on the "praise_content" field.
func PraiseContentHasSuffix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentEqualFold applies the EqualFold predicate on the "praise_content" field.
func PraiseContentEqualFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPraiseContent), v))
	})
}

// PraiseContentContainsFold applies the ContainsFold predicate on the "praise_content" field.
func PraiseContentContainsFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPraiseContent), v))
	})
}

// LetterContentEQ applies the EQ predicate on the "letter_content" field.
func LetterContentEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLetterContent), v))
	})
}

// LetterContentNEQ applies the NEQ predicate on the "letter_content" field.
func LetterContentNEQ(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLetterContent), v))
	})
}

// LetterContentIn applies the In predicate on the "letter_content" field.
func LetterContentIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLetterContent), v...))
	})
}

// LetterContentNotIn applies the NotIn predicate on the "letter_content" field.
func LetterContentNotIn(vs ...string) predicate.Draft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLetterContent), v...))
	})
}

// LetterContentGT applies the GT predicate on the "letter_content" field.
func LetterContentGT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLetterContent), v))
	})
}

// LetterContentGTE applies the GTE predicate on the "letter_content" field.
func LetterContentGTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLetterContent), v))
	})
}

// LetterContentLT applies the LT predicate on the "letter_content" field.
func LetterContentLT(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLetterContent), v))
	})
}

// LetterContentLTE applies the LTE predicate on the "letter_content" field.
func LetterContentLTE(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLetterContent), v))
	})
}

// LetterContentContains applies the Contains predicate on the "letter_content" field.
func LetterContentContains(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLetterContent), v))
	})
}

// LetterContentHasPrefix applies the HasPrefix predicate on the "letter_content" field.
func LetterContentHasPrefix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLetterContent), v))
	})
}

// LetterContentHasSuffix applies the HasSuffix predicate on the "letter_content" field.
func LetterContentHasSuffix(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLetterContent), v))
	})
}

// LetterContentEqualFold applies the EqualFold predicate on the "letter_content" field.
func LetterContentEqualFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLetterContent), v))
	})
}

// LetterContentContainsFold applies the ContainsFold predicate on the "letter_content" field.
func LetterContentContainsFold(v string) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLetterContent), v))
	})
}

// PraiseSpoiledEQ applies the EQ predicate on the "praise_spoiled" field.
func PraiseSpoiledEQ(v bool) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPraiseSpoiled), v))
	})
}

// PraiseSpoiledNEQ applies the NEQ predicate on the "praise_spoiled" field.
func PraiseSpoiledNEQ(v bool) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPraiseSpoiled), v))
	})
}

// LetterSpoiledEQ applies the EQ predicate on the "letter_spoiled" field.
func LetterSpoiledEQ(v bool) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLetterSpoiled), v))
	})
}

// LetterSpoiledNEQ applies the NEQ predicate on the "letter_spoiled" field.
func LetterSpoiledNEQ(v bool) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLetterSpoiled), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHashtags applies the HasEdge predicate on the "hashtags" edge.
func HasHashtags() predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HashtagsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HashtagsTable, HashtagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHashtagsWith applies the HasEdge predicate on the "hashtags" edge with a given conditions (other predicates).
func HasHashtagsWith(preds ...predicate.Hashtag) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HashtagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HashtagsTable, HashtagsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWork applies the HasEdge predicate on the "work" edge.
func HasWork() predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkTable, WorkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkWith applies the HasEdge predicate on the "work" edge with a given conditions (other predicates).
func HasWorkWith(preds ...predicate.Work) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkTable, WorkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CategoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CategoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Draft) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Draft) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Draft) predicate.Draft {
	return predicate.Draft(func(s *sql.Selector) {
		p(s.Not())
	})
}
