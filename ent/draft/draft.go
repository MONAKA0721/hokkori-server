// Code generated by ent, DO NOT EDIT.

package draft

import (
	"time"
)

const (
	// Label holds the string label denoting the draft type in the database.
	Label = "draft"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldPraiseTitle holds the string denoting the praise_title field in the database.
	FieldPraiseTitle = "praise_title"
	// FieldLetterTitle holds the string denoting the letter_title field in the database.
	FieldLetterTitle = "letter_title"
	// FieldPraiseContent holds the string denoting the praise_content field in the database.
	FieldPraiseContent = "praise_content"
	// FieldLetterContent holds the string denoting the letter_content field in the database.
	FieldLetterContent = "letter_content"
	// FieldPraiseSpoiled holds the string denoting the praise_spoiled field in the database.
	FieldPraiseSpoiled = "praise_spoiled"
	// FieldLetterSpoiled holds the string denoting the letter_spoiled field in the database.
	FieldLetterSpoiled = "letter_spoiled"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeHashtags holds the string denoting the hashtags edge name in mutations.
	EdgeHashtags = "hashtags"
	// EdgeWork holds the string denoting the work edge name in mutations.
	EdgeWork = "work"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// Table holds the table name of the draft in the database.
	Table = "drafts"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "drafts"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_drafts"
	// HashtagsTable is the table that holds the hashtags relation/edge. The primary key declared below.
	HashtagsTable = "draft_hashtags"
	// HashtagsInverseTable is the table name for the Hashtag entity.
	// It exists in this package in order to avoid circular dependency with the "hashtag" package.
	HashtagsInverseTable = "hashtags"
	// WorkTable is the table that holds the work relation/edge.
	WorkTable = "drafts"
	// WorkInverseTable is the table name for the Work entity.
	// It exists in this package in order to avoid circular dependency with the "work" package.
	WorkInverseTable = "works"
	// WorkColumn is the table column denoting the work relation/edge.
	WorkColumn = "work_drafts"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "drafts"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "draft_category"
)

// Columns holds all SQL columns for draft fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldPraiseTitle,
	FieldLetterTitle,
	FieldPraiseContent,
	FieldLetterContent,
	FieldPraiseSpoiled,
	FieldLetterSpoiled,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "drafts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"draft_category",
	"user_drafts",
	"work_drafts",
}

var (
	// HashtagsPrimaryKey and HashtagsColumn2 are the table columns denoting the
	// primary key for the hashtags relation (M2M).
	HashtagsPrimaryKey = []string{"draft_id", "hashtag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
