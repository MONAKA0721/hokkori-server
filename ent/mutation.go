// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/MONAKA0721/hokkori/ent/bookmark"
	"github.com/MONAKA0721/hokkori/ent/category"
	"github.com/MONAKA0721/hokkori/ent/draft"
	"github.com/MONAKA0721/hokkori/ent/hashtag"
	"github.com/MONAKA0721/hokkori/ent/like"
	"github.com/MONAKA0721/hokkori/ent/post"
	"github.com/MONAKA0721/hokkori/ent/predicate"
	"github.com/MONAKA0721/hokkori/ent/user"
	"github.com/MONAKA0721/hokkori/ent/work"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBookmark = "Bookmark"
	TypeCategory = "Category"
	TypeDraft    = "Draft"
	TypeHashtag  = "Hashtag"
	TypeLike     = "Like"
	TypePost     = "Post"
	TypeUser     = "User"
	TypeWork     = "Work"
)

// BookmarkMutation represents an operation that mutates the Bookmark nodes in the graph.
type BookmarkMutation struct {
	config
	op            Op
	typ           string
	bookmarked_at *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	post          *int
	clearedpost   bool
	done          bool
	oldValue      func(context.Context) (*Bookmark, error)
	predicates    []predicate.Bookmark
}

var _ ent.Mutation = (*BookmarkMutation)(nil)

// bookmarkOption allows management of the mutation configuration using functional options.
type bookmarkOption func(*BookmarkMutation)

// newBookmarkMutation creates new mutation for the Bookmark entity.
func newBookmarkMutation(c config, op Op, opts ...bookmarkOption) *BookmarkMutation {
	m := &BookmarkMutation{
		config:        c,
		op:            op,
		typ:           TypeBookmark,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookmarkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookmarkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetBookmarkedAt sets the "bookmarked_at" field.
func (m *BookmarkMutation) SetBookmarkedAt(t time.Time) {
	m.bookmarked_at = &t
}

// BookmarkedAt returns the value of the "bookmarked_at" field in the mutation.
func (m *BookmarkMutation) BookmarkedAt() (r time.Time, exists bool) {
	v := m.bookmarked_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetBookmarkedAt resets all changes to the "bookmarked_at" field.
func (m *BookmarkMutation) ResetBookmarkedAt() {
	m.bookmarked_at = nil
}

// SetUserID sets the "user_id" field.
func (m *BookmarkMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BookmarkMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BookmarkMutation) ResetUserID() {
	m.user = nil
}

// SetPostID sets the "post_id" field.
func (m *BookmarkMutation) SetPostID(i int) {
	m.post = &i
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *BookmarkMutation) PostID() (r int, exists bool) {
	v := m.post
	if v == nil {
		return
	}
	return *v, true
}

// ResetPostID resets all changes to the "post_id" field.
func (m *BookmarkMutation) ResetPostID() {
	m.post = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *BookmarkMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BookmarkMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BookmarkMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BookmarkMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearPost clears the "post" edge to the Post entity.
func (m *BookmarkMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *BookmarkMutation) PostCleared() bool {
	return m.clearedpost
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *BookmarkMutation) PostIDs() (ids []int) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *BookmarkMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// Where appends a list predicates to the BookmarkMutation builder.
func (m *BookmarkMutation) Where(ps ...predicate.Bookmark) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BookmarkMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bookmark).
func (m *BookmarkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookmarkMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.bookmarked_at != nil {
		fields = append(fields, bookmark.FieldBookmarkedAt)
	}
	if m.user != nil {
		fields = append(fields, bookmark.FieldUserID)
	}
	if m.post != nil {
		fields = append(fields, bookmark.FieldPostID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookmarkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bookmark.FieldBookmarkedAt:
		return m.BookmarkedAt()
	case bookmark.FieldUserID:
		return m.UserID()
	case bookmark.FieldPostID:
		return m.PostID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookmarkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Bookmark does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookmarkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bookmark.FieldBookmarkedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBookmarkedAt(v)
		return nil
	case bookmark.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case bookmark.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	}
	return fmt.Errorf("unknown Bookmark field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookmarkMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookmarkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookmarkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bookmark numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookmarkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookmarkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookmarkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bookmark nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookmarkMutation) ResetField(name string) error {
	switch name {
	case bookmark.FieldBookmarkedAt:
		m.ResetBookmarkedAt()
		return nil
	case bookmark.FieldUserID:
		m.ResetUserID()
		return nil
	case bookmark.FieldPostID:
		m.ResetPostID()
		return nil
	}
	return fmt.Errorf("unknown Bookmark field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookmarkMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, bookmark.EdgeUser)
	}
	if m.post != nil {
		edges = append(edges, bookmark.EdgePost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookmarkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bookmark.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case bookmark.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookmarkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookmarkMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookmarkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, bookmark.EdgeUser)
	}
	if m.clearedpost {
		edges = append(edges, bookmark.EdgePost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookmarkMutation) EdgeCleared(name string) bool {
	switch name {
	case bookmark.EdgeUser:
		return m.cleareduser
	case bookmark.EdgePost:
		return m.clearedpost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookmarkMutation) ClearEdge(name string) error {
	switch name {
	case bookmark.EdgeUser:
		m.ClearUser()
		return nil
	case bookmark.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown Bookmark unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookmarkMutation) ResetEdge(name string) error {
	switch name {
	case bookmark.EdgeUser:
		m.ResetUser()
		return nil
	case bookmark.EdgePost:
		m.ResetPost()
		return nil
	}
	return fmt.Errorf("unknown Bookmark edge %s", name)
}

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	post          map[int]struct{}
	removedpost   map[int]struct{}
	clearedpost   bool
	draft         map[int]struct{}
	removeddraft  map[int]struct{}
	cleareddraft  bool
	done          bool
	oldValue      func(context.Context) (*Category, error)
	predicates    []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// AddPostIDs adds the "post" edge to the Post entity by ids.
func (m *CategoryMutation) AddPostIDs(ids ...int) {
	if m.post == nil {
		m.post = make(map[int]struct{})
	}
	for i := range ids {
		m.post[ids[i]] = struct{}{}
	}
}

// ClearPost clears the "post" edge to the Post entity.
func (m *CategoryMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *CategoryMutation) PostCleared() bool {
	return m.clearedpost
}

// RemovePostIDs removes the "post" edge to the Post entity by IDs.
func (m *CategoryMutation) RemovePostIDs(ids ...int) {
	if m.removedpost == nil {
		m.removedpost = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.post, ids[i])
		m.removedpost[ids[i]] = struct{}{}
	}
}

// RemovedPost returns the removed IDs of the "post" edge to the Post entity.
func (m *CategoryMutation) RemovedPostIDs() (ids []int) {
	for id := range m.removedpost {
		ids = append(ids, id)
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
func (m *CategoryMutation) PostIDs() (ids []int) {
	for id := range m.post {
		ids = append(ids, id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *CategoryMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
	m.removedpost = nil
}

// AddDraftIDs adds the "draft" edge to the Draft entity by ids.
func (m *CategoryMutation) AddDraftIDs(ids ...int) {
	if m.draft == nil {
		m.draft = make(map[int]struct{})
	}
	for i := range ids {
		m.draft[ids[i]] = struct{}{}
	}
}

// ClearDraft clears the "draft" edge to the Draft entity.
func (m *CategoryMutation) ClearDraft() {
	m.cleareddraft = true
}

// DraftCleared reports if the "draft" edge to the Draft entity was cleared.
func (m *CategoryMutation) DraftCleared() bool {
	return m.cleareddraft
}

// RemoveDraftIDs removes the "draft" edge to the Draft entity by IDs.
func (m *CategoryMutation) RemoveDraftIDs(ids ...int) {
	if m.removeddraft == nil {
		m.removeddraft = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.draft, ids[i])
		m.removeddraft[ids[i]] = struct{}{}
	}
}

// RemovedDraft returns the removed IDs of the "draft" edge to the Draft entity.
func (m *CategoryMutation) RemovedDraftIDs() (ids []int) {
	for id := range m.removeddraft {
		ids = append(ids, id)
	}
	return
}

// DraftIDs returns the "draft" edge IDs in the mutation.
func (m *CategoryMutation) DraftIDs() (ids []int) {
	for id := range m.draft {
		ids = append(ids, id)
	}
	return
}

// ResetDraft resets all changes to the "draft" edge.
func (m *CategoryMutation) ResetDraft() {
	m.draft = nil
	m.cleareddraft = false
	m.removeddraft = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.post != nil {
		edges = append(edges, category.EdgePost)
	}
	if m.draft != nil {
		edges = append(edges, category.EdgeDraft)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgePost:
		ids := make([]ent.Value, 0, len(m.post))
		for id := range m.post {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeDraft:
		ids := make([]ent.Value, 0, len(m.draft))
		for id := range m.draft {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpost != nil {
		edges = append(edges, category.EdgePost)
	}
	if m.removeddraft != nil {
		edges = append(edges, category.EdgeDraft)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgePost:
		ids := make([]ent.Value, 0, len(m.removedpost))
		for id := range m.removedpost {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeDraft:
		ids := make([]ent.Value, 0, len(m.removeddraft))
		for id := range m.removeddraft {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpost {
		edges = append(edges, category.EdgePost)
	}
	if m.cleareddraft {
		edges = append(edges, category.EdgeDraft)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgePost:
		return m.clearedpost
	case category.EdgeDraft:
		return m.cleareddraft
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgePost:
		m.ResetPost()
		return nil
	case category.EdgeDraft:
		m.ResetDraft()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// DraftMutation represents an operation that mutates the Draft nodes in the graph.
type DraftMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	praise_title    *string
	letter_title    *string
	praise_content  *string
	letter_content  *string
	praise_spoiled  *bool
	letter_spoiled  *bool
	clearedFields   map[string]struct{}
	owner           *int
	clearedowner    bool
	hashtags        map[int]struct{}
	removedhashtags map[int]struct{}
	clearedhashtags bool
	work            *int
	clearedwork     bool
	category        *int
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*Draft, error)
	predicates      []predicate.Draft
}

var _ ent.Mutation = (*DraftMutation)(nil)

// draftOption allows management of the mutation configuration using functional options.
type draftOption func(*DraftMutation)

// newDraftMutation creates new mutation for the Draft entity.
func newDraftMutation(c config, op Op, opts ...draftOption) *DraftMutation {
	m := &DraftMutation{
		config:        c,
		op:            op,
		typ:           TypeDraft,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDraftID sets the ID field of the mutation.
func withDraftID(id int) draftOption {
	return func(m *DraftMutation) {
		var (
			err   error
			once  sync.Once
			value *Draft
		)
		m.oldValue = func(ctx context.Context) (*Draft, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Draft.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDraft sets the old Draft of the mutation.
func withDraft(node *Draft) draftOption {
	return func(m *DraftMutation) {
		m.oldValue = func(context.Context) (*Draft, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DraftMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DraftMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DraftMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DraftMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Draft.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DraftMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DraftMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DraftMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DraftMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DraftMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DraftMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetPraiseTitle sets the "praise_title" field.
func (m *DraftMutation) SetPraiseTitle(s string) {
	m.praise_title = &s
}

// PraiseTitle returns the value of the "praise_title" field in the mutation.
func (m *DraftMutation) PraiseTitle() (r string, exists bool) {
	v := m.praise_title
	if v == nil {
		return
	}
	return *v, true
}

// OldPraiseTitle returns the old "praise_title" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldPraiseTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPraiseTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPraiseTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPraiseTitle: %w", err)
	}
	return oldValue.PraiseTitle, nil
}

// ResetPraiseTitle resets all changes to the "praise_title" field.
func (m *DraftMutation) ResetPraiseTitle() {
	m.praise_title = nil
}

// SetLetterTitle sets the "letter_title" field.
func (m *DraftMutation) SetLetterTitle(s string) {
	m.letter_title = &s
}

// LetterTitle returns the value of the "letter_title" field in the mutation.
func (m *DraftMutation) LetterTitle() (r string, exists bool) {
	v := m.letter_title
	if v == nil {
		return
	}
	return *v, true
}

// OldLetterTitle returns the old "letter_title" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldLetterTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLetterTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLetterTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLetterTitle: %w", err)
	}
	return oldValue.LetterTitle, nil
}

// ResetLetterTitle resets all changes to the "letter_title" field.
func (m *DraftMutation) ResetLetterTitle() {
	m.letter_title = nil
}

// SetPraiseContent sets the "praise_content" field.
func (m *DraftMutation) SetPraiseContent(s string) {
	m.praise_content = &s
}

// PraiseContent returns the value of the "praise_content" field in the mutation.
func (m *DraftMutation) PraiseContent() (r string, exists bool) {
	v := m.praise_content
	if v == nil {
		return
	}
	return *v, true
}

// OldPraiseContent returns the old "praise_content" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldPraiseContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPraiseContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPraiseContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPraiseContent: %w", err)
	}
	return oldValue.PraiseContent, nil
}

// ResetPraiseContent resets all changes to the "praise_content" field.
func (m *DraftMutation) ResetPraiseContent() {
	m.praise_content = nil
}

// SetLetterContent sets the "letter_content" field.
func (m *DraftMutation) SetLetterContent(s string) {
	m.letter_content = &s
}

// LetterContent returns the value of the "letter_content" field in the mutation.
func (m *DraftMutation) LetterContent() (r string, exists bool) {
	v := m.letter_content
	if v == nil {
		return
	}
	return *v, true
}

// OldLetterContent returns the old "letter_content" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldLetterContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLetterContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLetterContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLetterContent: %w", err)
	}
	return oldValue.LetterContent, nil
}

// ResetLetterContent resets all changes to the "letter_content" field.
func (m *DraftMutation) ResetLetterContent() {
	m.letter_content = nil
}

// SetPraiseSpoiled sets the "praise_spoiled" field.
func (m *DraftMutation) SetPraiseSpoiled(b bool) {
	m.praise_spoiled = &b
}

// PraiseSpoiled returns the value of the "praise_spoiled" field in the mutation.
func (m *DraftMutation) PraiseSpoiled() (r bool, exists bool) {
	v := m.praise_spoiled
	if v == nil {
		return
	}
	return *v, true
}

// OldPraiseSpoiled returns the old "praise_spoiled" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldPraiseSpoiled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPraiseSpoiled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPraiseSpoiled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPraiseSpoiled: %w", err)
	}
	return oldValue.PraiseSpoiled, nil
}

// ResetPraiseSpoiled resets all changes to the "praise_spoiled" field.
func (m *DraftMutation) ResetPraiseSpoiled() {
	m.praise_spoiled = nil
}

// SetLetterSpoiled sets the "letter_spoiled" field.
func (m *DraftMutation) SetLetterSpoiled(b bool) {
	m.letter_spoiled = &b
}

// LetterSpoiled returns the value of the "letter_spoiled" field in the mutation.
func (m *DraftMutation) LetterSpoiled() (r bool, exists bool) {
	v := m.letter_spoiled
	if v == nil {
		return
	}
	return *v, true
}

// OldLetterSpoiled returns the old "letter_spoiled" field's value of the Draft entity.
// If the Draft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DraftMutation) OldLetterSpoiled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLetterSpoiled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLetterSpoiled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLetterSpoiled: %w", err)
	}
	return oldValue.LetterSpoiled, nil
}

// ResetLetterSpoiled resets all changes to the "letter_spoiled" field.
func (m *DraftMutation) ResetLetterSpoiled() {
	m.letter_spoiled = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *DraftMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *DraftMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *DraftMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *DraftMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *DraftMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *DraftMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddHashtagIDs adds the "hashtags" edge to the Hashtag entity by ids.
func (m *DraftMutation) AddHashtagIDs(ids ...int) {
	if m.hashtags == nil {
		m.hashtags = make(map[int]struct{})
	}
	for i := range ids {
		m.hashtags[ids[i]] = struct{}{}
	}
}

// ClearHashtags clears the "hashtags" edge to the Hashtag entity.
func (m *DraftMutation) ClearHashtags() {
	m.clearedhashtags = true
}

// HashtagsCleared reports if the "hashtags" edge to the Hashtag entity was cleared.
func (m *DraftMutation) HashtagsCleared() bool {
	return m.clearedhashtags
}

// RemoveHashtagIDs removes the "hashtags" edge to the Hashtag entity by IDs.
func (m *DraftMutation) RemoveHashtagIDs(ids ...int) {
	if m.removedhashtags == nil {
		m.removedhashtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hashtags, ids[i])
		m.removedhashtags[ids[i]] = struct{}{}
	}
}

// RemovedHashtags returns the removed IDs of the "hashtags" edge to the Hashtag entity.
func (m *DraftMutation) RemovedHashtagsIDs() (ids []int) {
	for id := range m.removedhashtags {
		ids = append(ids, id)
	}
	return
}

// HashtagsIDs returns the "hashtags" edge IDs in the mutation.
func (m *DraftMutation) HashtagsIDs() (ids []int) {
	for id := range m.hashtags {
		ids = append(ids, id)
	}
	return
}

// ResetHashtags resets all changes to the "hashtags" edge.
func (m *DraftMutation) ResetHashtags() {
	m.hashtags = nil
	m.clearedhashtags = false
	m.removedhashtags = nil
}

// SetWorkID sets the "work" edge to the Work entity by id.
func (m *DraftMutation) SetWorkID(id int) {
	m.work = &id
}

// ClearWork clears the "work" edge to the Work entity.
func (m *DraftMutation) ClearWork() {
	m.clearedwork = true
}

// WorkCleared reports if the "work" edge to the Work entity was cleared.
func (m *DraftMutation) WorkCleared() bool {
	return m.clearedwork
}

// WorkID returns the "work" edge ID in the mutation.
func (m *DraftMutation) WorkID() (id int, exists bool) {
	if m.work != nil {
		return *m.work, true
	}
	return
}

// WorkIDs returns the "work" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkID instead. It exists only for internal usage by the builders.
func (m *DraftMutation) WorkIDs() (ids []int) {
	if id := m.work; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWork resets all changes to the "work" edge.
func (m *DraftMutation) ResetWork() {
	m.work = nil
	m.clearedwork = false
}

// SetCategoryID sets the "category" edge to the Category entity by id.
func (m *DraftMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *DraftMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *DraftMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *DraftMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *DraftMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *DraftMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the DraftMutation builder.
func (m *DraftMutation) Where(ps ...predicate.Draft) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DraftMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Draft).
func (m *DraftMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DraftMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, draft.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, draft.FieldUpdateTime)
	}
	if m.praise_title != nil {
		fields = append(fields, draft.FieldPraiseTitle)
	}
	if m.letter_title != nil {
		fields = append(fields, draft.FieldLetterTitle)
	}
	if m.praise_content != nil {
		fields = append(fields, draft.FieldPraiseContent)
	}
	if m.letter_content != nil {
		fields = append(fields, draft.FieldLetterContent)
	}
	if m.praise_spoiled != nil {
		fields = append(fields, draft.FieldPraiseSpoiled)
	}
	if m.letter_spoiled != nil {
		fields = append(fields, draft.FieldLetterSpoiled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DraftMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case draft.FieldCreateTime:
		return m.CreateTime()
	case draft.FieldUpdateTime:
		return m.UpdateTime()
	case draft.FieldPraiseTitle:
		return m.PraiseTitle()
	case draft.FieldLetterTitle:
		return m.LetterTitle()
	case draft.FieldPraiseContent:
		return m.PraiseContent()
	case draft.FieldLetterContent:
		return m.LetterContent()
	case draft.FieldPraiseSpoiled:
		return m.PraiseSpoiled()
	case draft.FieldLetterSpoiled:
		return m.LetterSpoiled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DraftMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case draft.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case draft.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case draft.FieldPraiseTitle:
		return m.OldPraiseTitle(ctx)
	case draft.FieldLetterTitle:
		return m.OldLetterTitle(ctx)
	case draft.FieldPraiseContent:
		return m.OldPraiseContent(ctx)
	case draft.FieldLetterContent:
		return m.OldLetterContent(ctx)
	case draft.FieldPraiseSpoiled:
		return m.OldPraiseSpoiled(ctx)
	case draft.FieldLetterSpoiled:
		return m.OldLetterSpoiled(ctx)
	}
	return nil, fmt.Errorf("unknown Draft field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DraftMutation) SetField(name string, value ent.Value) error {
	switch name {
	case draft.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case draft.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case draft.FieldPraiseTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPraiseTitle(v)
		return nil
	case draft.FieldLetterTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLetterTitle(v)
		return nil
	case draft.FieldPraiseContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPraiseContent(v)
		return nil
	case draft.FieldLetterContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLetterContent(v)
		return nil
	case draft.FieldPraiseSpoiled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPraiseSpoiled(v)
		return nil
	case draft.FieldLetterSpoiled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLetterSpoiled(v)
		return nil
	}
	return fmt.Errorf("unknown Draft field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DraftMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DraftMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DraftMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Draft numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DraftMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DraftMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DraftMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Draft nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DraftMutation) ResetField(name string) error {
	switch name {
	case draft.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case draft.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case draft.FieldPraiseTitle:
		m.ResetPraiseTitle()
		return nil
	case draft.FieldLetterTitle:
		m.ResetLetterTitle()
		return nil
	case draft.FieldPraiseContent:
		m.ResetPraiseContent()
		return nil
	case draft.FieldLetterContent:
		m.ResetLetterContent()
		return nil
	case draft.FieldPraiseSpoiled:
		m.ResetPraiseSpoiled()
		return nil
	case draft.FieldLetterSpoiled:
		m.ResetLetterSpoiled()
		return nil
	}
	return fmt.Errorf("unknown Draft field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DraftMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.owner != nil {
		edges = append(edges, draft.EdgeOwner)
	}
	if m.hashtags != nil {
		edges = append(edges, draft.EdgeHashtags)
	}
	if m.work != nil {
		edges = append(edges, draft.EdgeWork)
	}
	if m.category != nil {
		edges = append(edges, draft.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DraftMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case draft.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case draft.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.hashtags))
		for id := range m.hashtags {
			ids = append(ids, id)
		}
		return ids
	case draft.EdgeWork:
		if id := m.work; id != nil {
			return []ent.Value{*id}
		}
	case draft.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DraftMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedhashtags != nil {
		edges = append(edges, draft.EdgeHashtags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DraftMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case draft.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.removedhashtags))
		for id := range m.removedhashtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DraftMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedowner {
		edges = append(edges, draft.EdgeOwner)
	}
	if m.clearedhashtags {
		edges = append(edges, draft.EdgeHashtags)
	}
	if m.clearedwork {
		edges = append(edges, draft.EdgeWork)
	}
	if m.clearedcategory {
		edges = append(edges, draft.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DraftMutation) EdgeCleared(name string) bool {
	switch name {
	case draft.EdgeOwner:
		return m.clearedowner
	case draft.EdgeHashtags:
		return m.clearedhashtags
	case draft.EdgeWork:
		return m.clearedwork
	case draft.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DraftMutation) ClearEdge(name string) error {
	switch name {
	case draft.EdgeOwner:
		m.ClearOwner()
		return nil
	case draft.EdgeWork:
		m.ClearWork()
		return nil
	case draft.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Draft unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DraftMutation) ResetEdge(name string) error {
	switch name {
	case draft.EdgeOwner:
		m.ResetOwner()
		return nil
	case draft.EdgeHashtags:
		m.ResetHashtags()
		return nil
	case draft.EdgeWork:
		m.ResetWork()
		return nil
	case draft.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Draft edge %s", name)
}

// HashtagMutation represents an operation that mutates the Hashtag nodes in the graph.
type HashtagMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	clearedFields map[string]struct{}
	posts         map[int]struct{}
	removedposts  map[int]struct{}
	clearedposts  bool
	drafts        map[int]struct{}
	removeddrafts map[int]struct{}
	cleareddrafts bool
	done          bool
	oldValue      func(context.Context) (*Hashtag, error)
	predicates    []predicate.Hashtag
}

var _ ent.Mutation = (*HashtagMutation)(nil)

// hashtagOption allows management of the mutation configuration using functional options.
type hashtagOption func(*HashtagMutation)

// newHashtagMutation creates new mutation for the Hashtag entity.
func newHashtagMutation(c config, op Op, opts ...hashtagOption) *HashtagMutation {
	m := &HashtagMutation{
		config:        c,
		op:            op,
		typ:           TypeHashtag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHashtagID sets the ID field of the mutation.
func withHashtagID(id int) hashtagOption {
	return func(m *HashtagMutation) {
		var (
			err   error
			once  sync.Once
			value *Hashtag
		)
		m.oldValue = func(ctx context.Context) (*Hashtag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hashtag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHashtag sets the old Hashtag of the mutation.
func withHashtag(node *Hashtag) hashtagOption {
	return func(m *HashtagMutation) {
		m.oldValue = func(context.Context) (*Hashtag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HashtagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HashtagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HashtagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HashtagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hashtag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *HashtagMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *HashtagMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Hashtag entity.
// If the Hashtag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashtagMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *HashtagMutation) ResetTitle() {
	m.title = nil
}

// AddPostIDs adds the "posts" edge to the Post entity by ids.
func (m *HashtagMutation) AddPostIDs(ids ...int) {
	if m.posts == nil {
		m.posts = make(map[int]struct{})
	}
	for i := range ids {
		m.posts[ids[i]] = struct{}{}
	}
}

// ClearPosts clears the "posts" edge to the Post entity.
func (m *HashtagMutation) ClearPosts() {
	m.clearedposts = true
}

// PostsCleared reports if the "posts" edge to the Post entity was cleared.
func (m *HashtagMutation) PostsCleared() bool {
	return m.clearedposts
}

// RemovePostIDs removes the "posts" edge to the Post entity by IDs.
func (m *HashtagMutation) RemovePostIDs(ids ...int) {
	if m.removedposts == nil {
		m.removedposts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.posts, ids[i])
		m.removedposts[ids[i]] = struct{}{}
	}
}

// RemovedPosts returns the removed IDs of the "posts" edge to the Post entity.
func (m *HashtagMutation) RemovedPostsIDs() (ids []int) {
	for id := range m.removedposts {
		ids = append(ids, id)
	}
	return
}

// PostsIDs returns the "posts" edge IDs in the mutation.
func (m *HashtagMutation) PostsIDs() (ids []int) {
	for id := range m.posts {
		ids = append(ids, id)
	}
	return
}

// ResetPosts resets all changes to the "posts" edge.
func (m *HashtagMutation) ResetPosts() {
	m.posts = nil
	m.clearedposts = false
	m.removedposts = nil
}

// AddDraftIDs adds the "drafts" edge to the Draft entity by ids.
func (m *HashtagMutation) AddDraftIDs(ids ...int) {
	if m.drafts == nil {
		m.drafts = make(map[int]struct{})
	}
	for i := range ids {
		m.drafts[ids[i]] = struct{}{}
	}
}

// ClearDrafts clears the "drafts" edge to the Draft entity.
func (m *HashtagMutation) ClearDrafts() {
	m.cleareddrafts = true
}

// DraftsCleared reports if the "drafts" edge to the Draft entity was cleared.
func (m *HashtagMutation) DraftsCleared() bool {
	return m.cleareddrafts
}

// RemoveDraftIDs removes the "drafts" edge to the Draft entity by IDs.
func (m *HashtagMutation) RemoveDraftIDs(ids ...int) {
	if m.removeddrafts == nil {
		m.removeddrafts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.drafts, ids[i])
		m.removeddrafts[ids[i]] = struct{}{}
	}
}

// RemovedDrafts returns the removed IDs of the "drafts" edge to the Draft entity.
func (m *HashtagMutation) RemovedDraftsIDs() (ids []int) {
	for id := range m.removeddrafts {
		ids = append(ids, id)
	}
	return
}

// DraftsIDs returns the "drafts" edge IDs in the mutation.
func (m *HashtagMutation) DraftsIDs() (ids []int) {
	for id := range m.drafts {
		ids = append(ids, id)
	}
	return
}

// ResetDrafts resets all changes to the "drafts" edge.
func (m *HashtagMutation) ResetDrafts() {
	m.drafts = nil
	m.cleareddrafts = false
	m.removeddrafts = nil
}

// Where appends a list predicates to the HashtagMutation builder.
func (m *HashtagMutation) Where(ps ...predicate.Hashtag) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HashtagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Hashtag).
func (m *HashtagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HashtagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.title != nil {
		fields = append(fields, hashtag.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HashtagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hashtag.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HashtagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hashtag.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Hashtag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hashtag.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HashtagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HashtagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Hashtag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HashtagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HashtagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HashtagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hashtag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HashtagMutation) ResetField(name string) error {
	switch name {
	case hashtag.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HashtagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.posts != nil {
		edges = append(edges, hashtag.EdgePosts)
	}
	if m.drafts != nil {
		edges = append(edges, hashtag.EdgeDrafts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HashtagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgePosts:
		ids := make([]ent.Value, 0, len(m.posts))
		for id := range m.posts {
			ids = append(ids, id)
		}
		return ids
	case hashtag.EdgeDrafts:
		ids := make([]ent.Value, 0, len(m.drafts))
		for id := range m.drafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HashtagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedposts != nil {
		edges = append(edges, hashtag.EdgePosts)
	}
	if m.removeddrafts != nil {
		edges = append(edges, hashtag.EdgeDrafts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HashtagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgePosts:
		ids := make([]ent.Value, 0, len(m.removedposts))
		for id := range m.removedposts {
			ids = append(ids, id)
		}
		return ids
	case hashtag.EdgeDrafts:
		ids := make([]ent.Value, 0, len(m.removeddrafts))
		for id := range m.removeddrafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HashtagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedposts {
		edges = append(edges, hashtag.EdgePosts)
	}
	if m.cleareddrafts {
		edges = append(edges, hashtag.EdgeDrafts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HashtagMutation) EdgeCleared(name string) bool {
	switch name {
	case hashtag.EdgePosts:
		return m.clearedposts
	case hashtag.EdgeDrafts:
		return m.cleareddrafts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HashtagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Hashtag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HashtagMutation) ResetEdge(name string) error {
	switch name {
	case hashtag.EdgePosts:
		m.ResetPosts()
		return nil
	case hashtag.EdgeDrafts:
		m.ResetDrafts()
		return nil
	}
	return fmt.Errorf("unknown Hashtag edge %s", name)
}

// LikeMutation represents an operation that mutates the Like nodes in the graph.
type LikeMutation struct {
	config
	op            Op
	typ           string
	liked_at      *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	post          *int
	clearedpost   bool
	done          bool
	oldValue      func(context.Context) (*Like, error)
	predicates    []predicate.Like
}

var _ ent.Mutation = (*LikeMutation)(nil)

// likeOption allows management of the mutation configuration using functional options.
type likeOption func(*LikeMutation)

// newLikeMutation creates new mutation for the Like entity.
func newLikeMutation(c config, op Op, opts ...likeOption) *LikeMutation {
	m := &LikeMutation{
		config:        c,
		op:            op,
		typ:           TypeLike,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetLikedAt sets the "liked_at" field.
func (m *LikeMutation) SetLikedAt(t time.Time) {
	m.liked_at = &t
}

// LikedAt returns the value of the "liked_at" field in the mutation.
func (m *LikeMutation) LikedAt() (r time.Time, exists bool) {
	v := m.liked_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetLikedAt resets all changes to the "liked_at" field.
func (m *LikeMutation) ResetLikedAt() {
	m.liked_at = nil
}

// SetUserID sets the "user_id" field.
func (m *LikeMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LikeMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LikeMutation) ResetUserID() {
	m.user = nil
}

// SetPostID sets the "post_id" field.
func (m *LikeMutation) SetPostID(i int) {
	m.post = &i
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *LikeMutation) PostID() (r int, exists bool) {
	v := m.post
	if v == nil {
		return
	}
	return *v, true
}

// ResetPostID resets all changes to the "post_id" field.
func (m *LikeMutation) ResetPostID() {
	m.post = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *LikeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LikeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LikeMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LikeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearPost clears the "post" edge to the Post entity.
func (m *LikeMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *LikeMutation) PostCleared() bool {
	return m.clearedpost
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *LikeMutation) PostIDs() (ids []int) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *LikeMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// Where appends a list predicates to the LikeMutation builder.
func (m *LikeMutation) Where(ps ...predicate.Like) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LikeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Like).
func (m *LikeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.liked_at != nil {
		fields = append(fields, like.FieldLikedAt)
	}
	if m.user != nil {
		fields = append(fields, like.FieldUserID)
	}
	if m.post != nil {
		fields = append(fields, like.FieldPostID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case like.FieldLikedAt:
		return m.LikedAt()
	case like.FieldUserID:
		return m.UserID()
	case like.FieldPostID:
		return m.PostID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Like does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case like.FieldLikedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikedAt(v)
		return nil
	case like.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case like.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	}
	return fmt.Errorf("unknown Like field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Like numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Like nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikeMutation) ResetField(name string) error {
	switch name {
	case like.FieldLikedAt:
		m.ResetLikedAt()
		return nil
	case like.FieldUserID:
		m.ResetUserID()
		return nil
	case like.FieldPostID:
		m.ResetPostID()
		return nil
	}
	return fmt.Errorf("unknown Like field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, like.EdgeUser)
	}
	if m.post != nil {
		edges = append(edges, like.EdgePost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case like.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case like.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, like.EdgeUser)
	}
	if m.clearedpost {
		edges = append(edges, like.EdgePost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikeMutation) EdgeCleared(name string) bool {
	switch name {
	case like.EdgeUser:
		return m.cleareduser
	case like.EdgePost:
		return m.clearedpost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikeMutation) ClearEdge(name string) error {
	switch name {
	case like.EdgeUser:
		m.ClearUser()
		return nil
	case like.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown Like unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikeMutation) ResetEdge(name string) error {
	switch name {
	case like.EdgeUser:
		m.ResetUser()
		return nil
	case like.EdgePost:
		m.ResetPost()
		return nil
	}
	return fmt.Errorf("unknown Like edge %s", name)
}

// PostMutation represents an operation that mutates the Post nodes in the graph.
type PostMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	title                   *string
	content                 *string
	_type                   *post.Type
	spoiled                 *bool
	thumbnail               *string
	clearedFields           map[string]struct{}
	owner                   *int
	clearedowner            bool
	hashtags                map[int]struct{}
	removedhashtags         map[int]struct{}
	clearedhashtags         bool
	work                    *int
	clearedwork             bool
	category                *int
	clearedcategory         bool
	liked_users             map[int]struct{}
	removedliked_users      map[int]struct{}
	clearedliked_users      bool
	bookmarked_users        map[int]struct{}
	removedbookmarked_users map[int]struct{}
	clearedbookmarked_users bool
	done                    bool
	oldValue                func(context.Context) (*Post, error)
	predicates              []predicate.Post
}

var _ ent.Mutation = (*PostMutation)(nil)

// postOption allows management of the mutation configuration using functional options.
type postOption func(*PostMutation)

// newPostMutation creates new mutation for the Post entity.
func newPostMutation(c config, op Op, opts ...postOption) *PostMutation {
	m := &PostMutation{
		config:        c,
		op:            op,
		typ:           TypePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostID sets the ID field of the mutation.
func withPostID(id int) postOption {
	return func(m *PostMutation) {
		var (
			err   error
			once  sync.Once
			value *Post
		)
		m.oldValue = func(ctx context.Context) (*Post, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Post.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPost sets the old Post of the mutation.
func withPost(node *Post) postOption {
	return func(m *PostMutation) {
		m.oldValue = func(context.Context) (*Post, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Post.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *PostMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *PostMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *PostMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *PostMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *PostMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *PostMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *PostMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PostMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PostMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *PostMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *PostMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *PostMutation) ResetContent() {
	m.content = nil
}

// SetType sets the "type" field.
func (m *PostMutation) SetType(po post.Type) {
	m._type = &po
}

// GetType returns the value of the "type" field in the mutation.
func (m *PostMutation) GetType() (r post.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldType(ctx context.Context) (v post.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PostMutation) ResetType() {
	m._type = nil
}

// SetSpoiled sets the "spoiled" field.
func (m *PostMutation) SetSpoiled(b bool) {
	m.spoiled = &b
}

// Spoiled returns the value of the "spoiled" field in the mutation.
func (m *PostMutation) Spoiled() (r bool, exists bool) {
	v := m.spoiled
	if v == nil {
		return
	}
	return *v, true
}

// OldSpoiled returns the old "spoiled" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldSpoiled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpoiled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpoiled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpoiled: %w", err)
	}
	return oldValue.Spoiled, nil
}

// ResetSpoiled resets all changes to the "spoiled" field.
func (m *PostMutation) ResetSpoiled() {
	m.spoiled = nil
}

// SetThumbnail sets the "thumbnail" field.
func (m *PostMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *PostMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (m *PostMutation) ClearThumbnail() {
	m.thumbnail = nil
	m.clearedFields[post.FieldThumbnail] = struct{}{}
}

// ThumbnailCleared returns if the "thumbnail" field was cleared in this mutation.
func (m *PostMutation) ThumbnailCleared() bool {
	_, ok := m.clearedFields[post.FieldThumbnail]
	return ok
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *PostMutation) ResetThumbnail() {
	m.thumbnail = nil
	delete(m.clearedFields, post.FieldThumbnail)
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *PostMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *PostMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *PostMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *PostMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *PostMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PostMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddHashtagIDs adds the "hashtags" edge to the Hashtag entity by ids.
func (m *PostMutation) AddHashtagIDs(ids ...int) {
	if m.hashtags == nil {
		m.hashtags = make(map[int]struct{})
	}
	for i := range ids {
		m.hashtags[ids[i]] = struct{}{}
	}
}

// ClearHashtags clears the "hashtags" edge to the Hashtag entity.
func (m *PostMutation) ClearHashtags() {
	m.clearedhashtags = true
}

// HashtagsCleared reports if the "hashtags" edge to the Hashtag entity was cleared.
func (m *PostMutation) HashtagsCleared() bool {
	return m.clearedhashtags
}

// RemoveHashtagIDs removes the "hashtags" edge to the Hashtag entity by IDs.
func (m *PostMutation) RemoveHashtagIDs(ids ...int) {
	if m.removedhashtags == nil {
		m.removedhashtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hashtags, ids[i])
		m.removedhashtags[ids[i]] = struct{}{}
	}
}

// RemovedHashtags returns the removed IDs of the "hashtags" edge to the Hashtag entity.
func (m *PostMutation) RemovedHashtagsIDs() (ids []int) {
	for id := range m.removedhashtags {
		ids = append(ids, id)
	}
	return
}

// HashtagsIDs returns the "hashtags" edge IDs in the mutation.
func (m *PostMutation) HashtagsIDs() (ids []int) {
	for id := range m.hashtags {
		ids = append(ids, id)
	}
	return
}

// ResetHashtags resets all changes to the "hashtags" edge.
func (m *PostMutation) ResetHashtags() {
	m.hashtags = nil
	m.clearedhashtags = false
	m.removedhashtags = nil
}

// SetWorkID sets the "work" edge to the Work entity by id.
func (m *PostMutation) SetWorkID(id int) {
	m.work = &id
}

// ClearWork clears the "work" edge to the Work entity.
func (m *PostMutation) ClearWork() {
	m.clearedwork = true
}

// WorkCleared reports if the "work" edge to the Work entity was cleared.
func (m *PostMutation) WorkCleared() bool {
	return m.clearedwork
}

// WorkID returns the "work" edge ID in the mutation.
func (m *PostMutation) WorkID() (id int, exists bool) {
	if m.work != nil {
		return *m.work, true
	}
	return
}

// WorkIDs returns the "work" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkID instead. It exists only for internal usage by the builders.
func (m *PostMutation) WorkIDs() (ids []int) {
	if id := m.work; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWork resets all changes to the "work" edge.
func (m *PostMutation) ResetWork() {
	m.work = nil
	m.clearedwork = false
}

// SetCategoryID sets the "category" edge to the Category entity by id.
func (m *PostMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *PostMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *PostMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *PostMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *PostMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *PostMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by ids.
func (m *PostMutation) AddLikedUserIDs(ids ...int) {
	if m.liked_users == nil {
		m.liked_users = make(map[int]struct{})
	}
	for i := range ids {
		m.liked_users[ids[i]] = struct{}{}
	}
}

// ClearLikedUsers clears the "liked_users" edge to the User entity.
func (m *PostMutation) ClearLikedUsers() {
	m.clearedliked_users = true
}

// LikedUsersCleared reports if the "liked_users" edge to the User entity was cleared.
func (m *PostMutation) LikedUsersCleared() bool {
	return m.clearedliked_users
}

// RemoveLikedUserIDs removes the "liked_users" edge to the User entity by IDs.
func (m *PostMutation) RemoveLikedUserIDs(ids ...int) {
	if m.removedliked_users == nil {
		m.removedliked_users = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked_users, ids[i])
		m.removedliked_users[ids[i]] = struct{}{}
	}
}

// RemovedLikedUsers returns the removed IDs of the "liked_users" edge to the User entity.
func (m *PostMutation) RemovedLikedUsersIDs() (ids []int) {
	for id := range m.removedliked_users {
		ids = append(ids, id)
	}
	return
}

// LikedUsersIDs returns the "liked_users" edge IDs in the mutation.
func (m *PostMutation) LikedUsersIDs() (ids []int) {
	for id := range m.liked_users {
		ids = append(ids, id)
	}
	return
}

// ResetLikedUsers resets all changes to the "liked_users" edge.
func (m *PostMutation) ResetLikedUsers() {
	m.liked_users = nil
	m.clearedliked_users = false
	m.removedliked_users = nil
}

// AddBookmarkedUserIDs adds the "bookmarked_users" edge to the User entity by ids.
func (m *PostMutation) AddBookmarkedUserIDs(ids ...int) {
	if m.bookmarked_users == nil {
		m.bookmarked_users = make(map[int]struct{})
	}
	for i := range ids {
		m.bookmarked_users[ids[i]] = struct{}{}
	}
}

// ClearBookmarkedUsers clears the "bookmarked_users" edge to the User entity.
func (m *PostMutation) ClearBookmarkedUsers() {
	m.clearedbookmarked_users = true
}

// BookmarkedUsersCleared reports if the "bookmarked_users" edge to the User entity was cleared.
func (m *PostMutation) BookmarkedUsersCleared() bool {
	return m.clearedbookmarked_users
}

// RemoveBookmarkedUserIDs removes the "bookmarked_users" edge to the User entity by IDs.
func (m *PostMutation) RemoveBookmarkedUserIDs(ids ...int) {
	if m.removedbookmarked_users == nil {
		m.removedbookmarked_users = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.bookmarked_users, ids[i])
		m.removedbookmarked_users[ids[i]] = struct{}{}
	}
}

// RemovedBookmarkedUsers returns the removed IDs of the "bookmarked_users" edge to the User entity.
func (m *PostMutation) RemovedBookmarkedUsersIDs() (ids []int) {
	for id := range m.removedbookmarked_users {
		ids = append(ids, id)
	}
	return
}

// BookmarkedUsersIDs returns the "bookmarked_users" edge IDs in the mutation.
func (m *PostMutation) BookmarkedUsersIDs() (ids []int) {
	for id := range m.bookmarked_users {
		ids = append(ids, id)
	}
	return
}

// ResetBookmarkedUsers resets all changes to the "bookmarked_users" edge.
func (m *PostMutation) ResetBookmarkedUsers() {
	m.bookmarked_users = nil
	m.clearedbookmarked_users = false
	m.removedbookmarked_users = nil
}

// Where appends a list predicates to the PostMutation builder.
func (m *PostMutation) Where(ps ...predicate.Post) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Post).
func (m *PostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, post.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, post.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, post.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, post.FieldContent)
	}
	if m._type != nil {
		fields = append(fields, post.FieldType)
	}
	if m.spoiled != nil {
		fields = append(fields, post.FieldSpoiled)
	}
	if m.thumbnail != nil {
		fields = append(fields, post.FieldThumbnail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case post.FieldCreateTime:
		return m.CreateTime()
	case post.FieldUpdateTime:
		return m.UpdateTime()
	case post.FieldTitle:
		return m.Title()
	case post.FieldContent:
		return m.Content()
	case post.FieldType:
		return m.GetType()
	case post.FieldSpoiled:
		return m.Spoiled()
	case post.FieldThumbnail:
		return m.Thumbnail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case post.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case post.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case post.FieldTitle:
		return m.OldTitle(ctx)
	case post.FieldContent:
		return m.OldContent(ctx)
	case post.FieldType:
		return m.OldType(ctx)
	case post.FieldSpoiled:
		return m.OldSpoiled(ctx)
	case post.FieldThumbnail:
		return m.OldThumbnail(ctx)
	}
	return nil, fmt.Errorf("unknown Post field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case post.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case post.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case post.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case post.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case post.FieldType:
		v, ok := value.(post.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case post.FieldSpoiled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpoiled(v)
		return nil
	case post.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Post numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(post.FieldThumbnail) {
		fields = append(fields, post.FieldThumbnail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMutation) ClearField(name string) error {
	switch name {
	case post.FieldThumbnail:
		m.ClearThumbnail()
		return nil
	}
	return fmt.Errorf("unknown Post nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMutation) ResetField(name string) error {
	switch name {
	case post.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case post.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case post.FieldTitle:
		m.ResetTitle()
		return nil
	case post.FieldContent:
		m.ResetContent()
		return nil
	case post.FieldType:
		m.ResetType()
		return nil
	case post.FieldSpoiled:
		m.ResetSpoiled()
		return nil
	case post.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.owner != nil {
		edges = append(edges, post.EdgeOwner)
	}
	if m.hashtags != nil {
		edges = append(edges, post.EdgeHashtags)
	}
	if m.work != nil {
		edges = append(edges, post.EdgeWork)
	}
	if m.category != nil {
		edges = append(edges, post.EdgeCategory)
	}
	if m.liked_users != nil {
		edges = append(edges, post.EdgeLikedUsers)
	}
	if m.bookmarked_users != nil {
		edges = append(edges, post.EdgeBookmarkedUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case post.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.hashtags))
		for id := range m.hashtags {
			ids = append(ids, id)
		}
		return ids
	case post.EdgeWork:
		if id := m.work; id != nil {
			return []ent.Value{*id}
		}
	case post.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case post.EdgeLikedUsers:
		ids := make([]ent.Value, 0, len(m.liked_users))
		for id := range m.liked_users {
			ids = append(ids, id)
		}
		return ids
	case post.EdgeBookmarkedUsers:
		ids := make([]ent.Value, 0, len(m.bookmarked_users))
		for id := range m.bookmarked_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedhashtags != nil {
		edges = append(edges, post.EdgeHashtags)
	}
	if m.removedliked_users != nil {
		edges = append(edges, post.EdgeLikedUsers)
	}
	if m.removedbookmarked_users != nil {
		edges = append(edges, post.EdgeBookmarkedUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.removedhashtags))
		for id := range m.removedhashtags {
			ids = append(ids, id)
		}
		return ids
	case post.EdgeLikedUsers:
		ids := make([]ent.Value, 0, len(m.removedliked_users))
		for id := range m.removedliked_users {
			ids = append(ids, id)
		}
		return ids
	case post.EdgeBookmarkedUsers:
		ids := make([]ent.Value, 0, len(m.removedbookmarked_users))
		for id := range m.removedbookmarked_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedowner {
		edges = append(edges, post.EdgeOwner)
	}
	if m.clearedhashtags {
		edges = append(edges, post.EdgeHashtags)
	}
	if m.clearedwork {
		edges = append(edges, post.EdgeWork)
	}
	if m.clearedcategory {
		edges = append(edges, post.EdgeCategory)
	}
	if m.clearedliked_users {
		edges = append(edges, post.EdgeLikedUsers)
	}
	if m.clearedbookmarked_users {
		edges = append(edges, post.EdgeBookmarkedUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMutation) EdgeCleared(name string) bool {
	switch name {
	case post.EdgeOwner:
		return m.clearedowner
	case post.EdgeHashtags:
		return m.clearedhashtags
	case post.EdgeWork:
		return m.clearedwork
	case post.EdgeCategory:
		return m.clearedcategory
	case post.EdgeLikedUsers:
		return m.clearedliked_users
	case post.EdgeBookmarkedUsers:
		return m.clearedbookmarked_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMutation) ClearEdge(name string) error {
	switch name {
	case post.EdgeOwner:
		m.ClearOwner()
		return nil
	case post.EdgeWork:
		m.ClearWork()
		return nil
	case post.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Post unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMutation) ResetEdge(name string) error {
	switch name {
	case post.EdgeOwner:
		m.ResetOwner()
		return nil
	case post.EdgeHashtags:
		m.ResetHashtags()
		return nil
	case post.EdgeWork:
		m.ResetWork()
		return nil
	case post.EdgeCategory:
		m.ResetCategory()
		return nil
	case post.EdgeLikedUsers:
		m.ResetLikedUsers()
		return nil
	case post.EdgeBookmarkedUsers:
		m.ResetBookmarkedUsers()
		return nil
	}
	return fmt.Errorf("unknown Post edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	username                *string
	profile                 *string
	avatar_url              *string
	age                     *int
	addage                  *int
	gender                  *int
	addgender               *int
	interests               *[]int
	clearedFields           map[string]struct{}
	posts                   map[int]struct{}
	removedposts            map[int]struct{}
	clearedposts            bool
	liked_posts             map[int]struct{}
	removedliked_posts      map[int]struct{}
	clearedliked_posts      bool
	bookmarked_posts        map[int]struct{}
	removedbookmarked_posts map[int]struct{}
	clearedbookmarked_posts bool
	followers               map[int]struct{}
	removedfollowers        map[int]struct{}
	clearedfollowers        bool
	following               map[int]struct{}
	removedfollowing        map[int]struct{}
	clearedfollowing        bool
	drafts                  map[int]struct{}
	removeddrafts           map[int]struct{}
	cleareddrafts           bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *UserMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[user.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *UserMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[user.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, user.FieldUsername)
}

// SetProfile sets the "profile" field.
func (m *UserMutation) SetProfile(s string) {
	m.profile = &s
}

// Profile returns the value of the "profile" field in the mutation.
func (m *UserMutation) Profile() (r string, exists bool) {
	v := m.profile
	if v == nil {
		return
	}
	return *v, true
}

// OldProfile returns the old "profile" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProfile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfile: %w", err)
	}
	return oldValue.Profile, nil
}

// ClearProfile clears the value of the "profile" field.
func (m *UserMutation) ClearProfile() {
	m.profile = nil
	m.clearedFields[user.FieldProfile] = struct{}{}
}

// ProfileCleared returns if the "profile" field was cleared in this mutation.
func (m *UserMutation) ProfileCleared() bool {
	_, ok := m.clearedFields[user.FieldProfile]
	return ok
}

// ResetProfile resets all changes to the "profile" field.
func (m *UserMutation) ResetProfile() {
	m.profile = nil
	delete(m.clearedFields, user.FieldProfile)
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (m *UserMutation) ClearAvatarURL() {
	m.avatar_url = nil
	m.clearedFields[user.FieldAvatarURL] = struct{}{}
}

// AvatarURLCleared returns if the "avatar_url" field was cleared in this mutation.
func (m *UserMutation) AvatarURLCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarURL]
	return ok
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
	delete(m.clearedFields, user.FieldAvatarURL)
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *UserMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[user.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *UserMutation) AgeCleared() bool {
	_, ok := m.clearedFields[user.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, user.FieldAge)
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(i int) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r int, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *UserMutation) AddGender(i int) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *UserMutation) AddedGender() (r int, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ClearGender clears the value of the "gender" field.
func (m *UserMutation) ClearGender() {
	m.gender = nil
	m.addgender = nil
	m.clearedFields[user.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *UserMutation) GenderCleared() bool {
	_, ok := m.clearedFields[user.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
	delete(m.clearedFields, user.FieldGender)
}

// SetInterests sets the "interests" field.
func (m *UserMutation) SetInterests(i []int) {
	m.interests = &i
}

// Interests returns the value of the "interests" field in the mutation.
func (m *UserMutation) Interests() (r []int, exists bool) {
	v := m.interests
	if v == nil {
		return
	}
	return *v, true
}

// OldInterests returns the old "interests" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldInterests(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInterests is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInterests requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterests: %w", err)
	}
	return oldValue.Interests, nil
}

// ClearInterests clears the value of the "interests" field.
func (m *UserMutation) ClearInterests() {
	m.interests = nil
	m.clearedFields[user.FieldInterests] = struct{}{}
}

// InterestsCleared returns if the "interests" field was cleared in this mutation.
func (m *UserMutation) InterestsCleared() bool {
	_, ok := m.clearedFields[user.FieldInterests]
	return ok
}

// ResetInterests resets all changes to the "interests" field.
func (m *UserMutation) ResetInterests() {
	m.interests = nil
	delete(m.clearedFields, user.FieldInterests)
}

// AddPostIDs adds the "posts" edge to the Post entity by ids.
func (m *UserMutation) AddPostIDs(ids ...int) {
	if m.posts == nil {
		m.posts = make(map[int]struct{})
	}
	for i := range ids {
		m.posts[ids[i]] = struct{}{}
	}
}

// ClearPosts clears the "posts" edge to the Post entity.
func (m *UserMutation) ClearPosts() {
	m.clearedposts = true
}

// PostsCleared reports if the "posts" edge to the Post entity was cleared.
func (m *UserMutation) PostsCleared() bool {
	return m.clearedposts
}

// RemovePostIDs removes the "posts" edge to the Post entity by IDs.
func (m *UserMutation) RemovePostIDs(ids ...int) {
	if m.removedposts == nil {
		m.removedposts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.posts, ids[i])
		m.removedposts[ids[i]] = struct{}{}
	}
}

// RemovedPosts returns the removed IDs of the "posts" edge to the Post entity.
func (m *UserMutation) RemovedPostsIDs() (ids []int) {
	for id := range m.removedposts {
		ids = append(ids, id)
	}
	return
}

// PostsIDs returns the "posts" edge IDs in the mutation.
func (m *UserMutation) PostsIDs() (ids []int) {
	for id := range m.posts {
		ids = append(ids, id)
	}
	return
}

// ResetPosts resets all changes to the "posts" edge.
func (m *UserMutation) ResetPosts() {
	m.posts = nil
	m.clearedposts = false
	m.removedposts = nil
}

// AddLikedPostIDs adds the "liked_posts" edge to the Post entity by ids.
func (m *UserMutation) AddLikedPostIDs(ids ...int) {
	if m.liked_posts == nil {
		m.liked_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.liked_posts[ids[i]] = struct{}{}
	}
}

// ClearLikedPosts clears the "liked_posts" edge to the Post entity.
func (m *UserMutation) ClearLikedPosts() {
	m.clearedliked_posts = true
}

// LikedPostsCleared reports if the "liked_posts" edge to the Post entity was cleared.
func (m *UserMutation) LikedPostsCleared() bool {
	return m.clearedliked_posts
}

// RemoveLikedPostIDs removes the "liked_posts" edge to the Post entity by IDs.
func (m *UserMutation) RemoveLikedPostIDs(ids ...int) {
	if m.removedliked_posts == nil {
		m.removedliked_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked_posts, ids[i])
		m.removedliked_posts[ids[i]] = struct{}{}
	}
}

// RemovedLikedPosts returns the removed IDs of the "liked_posts" edge to the Post entity.
func (m *UserMutation) RemovedLikedPostsIDs() (ids []int) {
	for id := range m.removedliked_posts {
		ids = append(ids, id)
	}
	return
}

// LikedPostsIDs returns the "liked_posts" edge IDs in the mutation.
func (m *UserMutation) LikedPostsIDs() (ids []int) {
	for id := range m.liked_posts {
		ids = append(ids, id)
	}
	return
}

// ResetLikedPosts resets all changes to the "liked_posts" edge.
func (m *UserMutation) ResetLikedPosts() {
	m.liked_posts = nil
	m.clearedliked_posts = false
	m.removedliked_posts = nil
}

// AddBookmarkedPostIDs adds the "bookmarked_posts" edge to the Post entity by ids.
func (m *UserMutation) AddBookmarkedPostIDs(ids ...int) {
	if m.bookmarked_posts == nil {
		m.bookmarked_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.bookmarked_posts[ids[i]] = struct{}{}
	}
}

// ClearBookmarkedPosts clears the "bookmarked_posts" edge to the Post entity.
func (m *UserMutation) ClearBookmarkedPosts() {
	m.clearedbookmarked_posts = true
}

// BookmarkedPostsCleared reports if the "bookmarked_posts" edge to the Post entity was cleared.
func (m *UserMutation) BookmarkedPostsCleared() bool {
	return m.clearedbookmarked_posts
}

// RemoveBookmarkedPostIDs removes the "bookmarked_posts" edge to the Post entity by IDs.
func (m *UserMutation) RemoveBookmarkedPostIDs(ids ...int) {
	if m.removedbookmarked_posts == nil {
		m.removedbookmarked_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.bookmarked_posts, ids[i])
		m.removedbookmarked_posts[ids[i]] = struct{}{}
	}
}

// RemovedBookmarkedPosts returns the removed IDs of the "bookmarked_posts" edge to the Post entity.
func (m *UserMutation) RemovedBookmarkedPostsIDs() (ids []int) {
	for id := range m.removedbookmarked_posts {
		ids = append(ids, id)
	}
	return
}

// BookmarkedPostsIDs returns the "bookmarked_posts" edge IDs in the mutation.
func (m *UserMutation) BookmarkedPostsIDs() (ids []int) {
	for id := range m.bookmarked_posts {
		ids = append(ids, id)
	}
	return
}

// ResetBookmarkedPosts resets all changes to the "bookmarked_posts" edge.
func (m *UserMutation) ResetBookmarkedPosts() {
	m.bookmarked_posts = nil
	m.clearedbookmarked_posts = false
	m.removedbookmarked_posts = nil
}

// AddFollowerIDs adds the "followers" edge to the User entity by ids.
func (m *UserMutation) AddFollowerIDs(ids ...int) {
	if m.followers == nil {
		m.followers = make(map[int]struct{})
	}
	for i := range ids {
		m.followers[ids[i]] = struct{}{}
	}
}

// ClearFollowers clears the "followers" edge to the User entity.
func (m *UserMutation) ClearFollowers() {
	m.clearedfollowers = true
}

// FollowersCleared reports if the "followers" edge to the User entity was cleared.
func (m *UserMutation) FollowersCleared() bool {
	return m.clearedfollowers
}

// RemoveFollowerIDs removes the "followers" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowerIDs(ids ...int) {
	if m.removedfollowers == nil {
		m.removedfollowers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.followers, ids[i])
		m.removedfollowers[ids[i]] = struct{}{}
	}
}

// RemovedFollowers returns the removed IDs of the "followers" edge to the User entity.
func (m *UserMutation) RemovedFollowersIDs() (ids []int) {
	for id := range m.removedfollowers {
		ids = append(ids, id)
	}
	return
}

// FollowersIDs returns the "followers" edge IDs in the mutation.
func (m *UserMutation) FollowersIDs() (ids []int) {
	for id := range m.followers {
		ids = append(ids, id)
	}
	return
}

// ResetFollowers resets all changes to the "followers" edge.
func (m *UserMutation) ResetFollowers() {
	m.followers = nil
	m.clearedfollowers = false
	m.removedfollowers = nil
}

// AddFollowingIDs adds the "following" edge to the User entity by ids.
func (m *UserMutation) AddFollowingIDs(ids ...int) {
	if m.following == nil {
		m.following = make(map[int]struct{})
	}
	for i := range ids {
		m.following[ids[i]] = struct{}{}
	}
}

// ClearFollowing clears the "following" edge to the User entity.
func (m *UserMutation) ClearFollowing() {
	m.clearedfollowing = true
}

// FollowingCleared reports if the "following" edge to the User entity was cleared.
func (m *UserMutation) FollowingCleared() bool {
	return m.clearedfollowing
}

// RemoveFollowingIDs removes the "following" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowingIDs(ids ...int) {
	if m.removedfollowing == nil {
		m.removedfollowing = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.following, ids[i])
		m.removedfollowing[ids[i]] = struct{}{}
	}
}

// RemovedFollowing returns the removed IDs of the "following" edge to the User entity.
func (m *UserMutation) RemovedFollowingIDs() (ids []int) {
	for id := range m.removedfollowing {
		ids = append(ids, id)
	}
	return
}

// FollowingIDs returns the "following" edge IDs in the mutation.
func (m *UserMutation) FollowingIDs() (ids []int) {
	for id := range m.following {
		ids = append(ids, id)
	}
	return
}

// ResetFollowing resets all changes to the "following" edge.
func (m *UserMutation) ResetFollowing() {
	m.following = nil
	m.clearedfollowing = false
	m.removedfollowing = nil
}

// AddDraftIDs adds the "drafts" edge to the Draft entity by ids.
func (m *UserMutation) AddDraftIDs(ids ...int) {
	if m.drafts == nil {
		m.drafts = make(map[int]struct{})
	}
	for i := range ids {
		m.drafts[ids[i]] = struct{}{}
	}
}

// ClearDrafts clears the "drafts" edge to the Draft entity.
func (m *UserMutation) ClearDrafts() {
	m.cleareddrafts = true
}

// DraftsCleared reports if the "drafts" edge to the Draft entity was cleared.
func (m *UserMutation) DraftsCleared() bool {
	return m.cleareddrafts
}

// RemoveDraftIDs removes the "drafts" edge to the Draft entity by IDs.
func (m *UserMutation) RemoveDraftIDs(ids ...int) {
	if m.removeddrafts == nil {
		m.removeddrafts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.drafts, ids[i])
		m.removeddrafts[ids[i]] = struct{}{}
	}
}

// RemovedDrafts returns the removed IDs of the "drafts" edge to the Draft entity.
func (m *UserMutation) RemovedDraftsIDs() (ids []int) {
	for id := range m.removeddrafts {
		ids = append(ids, id)
	}
	return
}

// DraftsIDs returns the "drafts" edge IDs in the mutation.
func (m *UserMutation) DraftsIDs() (ids []int) {
	for id := range m.drafts {
		ids = append(ids, id)
	}
	return
}

// ResetDrafts resets all changes to the "drafts" edge.
func (m *UserMutation) ResetDrafts() {
	m.drafts = nil
	m.cleareddrafts = false
	m.removeddrafts = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.profile != nil {
		fields = append(fields, user.FieldProfile)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.interests != nil {
		fields = append(fields, user.FieldInterests)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldUsername:
		return m.Username()
	case user.FieldProfile:
		return m.Profile()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	case user.FieldAge:
		return m.Age()
	case user.FieldGender:
		return m.Gender()
	case user.FieldInterests:
		return m.Interests()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldProfile:
		return m.OldProfile(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldInterests:
		return m.OldInterests(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldProfile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfile(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldInterests:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterests(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.addgender != nil {
		fields = append(fields, user.FieldGender)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	case user.FieldGender:
		return m.AddedGender()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case user.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUsername) {
		fields = append(fields, user.FieldUsername)
	}
	if m.FieldCleared(user.FieldProfile) {
		fields = append(fields, user.FieldProfile)
	}
	if m.FieldCleared(user.FieldAvatarURL) {
		fields = append(fields, user.FieldAvatarURL)
	}
	if m.FieldCleared(user.FieldAge) {
		fields = append(fields, user.FieldAge)
	}
	if m.FieldCleared(user.FieldGender) {
		fields = append(fields, user.FieldGender)
	}
	if m.FieldCleared(user.FieldInterests) {
		fields = append(fields, user.FieldInterests)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ClearUsername()
		return nil
	case user.FieldProfile:
		m.ClearProfile()
		return nil
	case user.FieldAvatarURL:
		m.ClearAvatarURL()
		return nil
	case user.FieldAge:
		m.ClearAge()
		return nil
	case user.FieldGender:
		m.ClearGender()
		return nil
	case user.FieldInterests:
		m.ClearInterests()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldProfile:
		m.ResetProfile()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldInterests:
		m.ResetInterests()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.posts != nil {
		edges = append(edges, user.EdgePosts)
	}
	if m.liked_posts != nil {
		edges = append(edges, user.EdgeLikedPosts)
	}
	if m.bookmarked_posts != nil {
		edges = append(edges, user.EdgeBookmarkedPosts)
	}
	if m.followers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.following != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.drafts != nil {
		edges = append(edges, user.EdgeDrafts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePosts:
		ids := make([]ent.Value, 0, len(m.posts))
		for id := range m.posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikedPosts:
		ids := make([]ent.Value, 0, len(m.liked_posts))
		for id := range m.liked_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBookmarkedPosts:
		ids := make([]ent.Value, 0, len(m.bookmarked_posts))
		for id := range m.bookmarked_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.followers))
		for id := range m.followers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.following))
		for id := range m.following {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDrafts:
		ids := make([]ent.Value, 0, len(m.drafts))
		for id := range m.drafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedposts != nil {
		edges = append(edges, user.EdgePosts)
	}
	if m.removedliked_posts != nil {
		edges = append(edges, user.EdgeLikedPosts)
	}
	if m.removedbookmarked_posts != nil {
		edges = append(edges, user.EdgeBookmarkedPosts)
	}
	if m.removedfollowers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.removedfollowing != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.removeddrafts != nil {
		edges = append(edges, user.EdgeDrafts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePosts:
		ids := make([]ent.Value, 0, len(m.removedposts))
		for id := range m.removedposts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikedPosts:
		ids := make([]ent.Value, 0, len(m.removedliked_posts))
		for id := range m.removedliked_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBookmarkedPosts:
		ids := make([]ent.Value, 0, len(m.removedbookmarked_posts))
		for id := range m.removedbookmarked_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.removedfollowers))
		for id := range m.removedfollowers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.removedfollowing))
		for id := range m.removedfollowing {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDrafts:
		ids := make([]ent.Value, 0, len(m.removeddrafts))
		for id := range m.removeddrafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedposts {
		edges = append(edges, user.EdgePosts)
	}
	if m.clearedliked_posts {
		edges = append(edges, user.EdgeLikedPosts)
	}
	if m.clearedbookmarked_posts {
		edges = append(edges, user.EdgeBookmarkedPosts)
	}
	if m.clearedfollowers {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.clearedfollowing {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.cleareddrafts {
		edges = append(edges, user.EdgeDrafts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePosts:
		return m.clearedposts
	case user.EdgeLikedPosts:
		return m.clearedliked_posts
	case user.EdgeBookmarkedPosts:
		return m.clearedbookmarked_posts
	case user.EdgeFollowers:
		return m.clearedfollowers
	case user.EdgeFollowing:
		return m.clearedfollowing
	case user.EdgeDrafts:
		return m.cleareddrafts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePosts:
		m.ResetPosts()
		return nil
	case user.EdgeLikedPosts:
		m.ResetLikedPosts()
		return nil
	case user.EdgeBookmarkedPosts:
		m.ResetBookmarkedPosts()
		return nil
	case user.EdgeFollowers:
		m.ResetFollowers()
		return nil
	case user.EdgeFollowing:
		m.ResetFollowing()
		return nil
	case user.EdgeDrafts:
		m.ResetDrafts()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WorkMutation represents an operation that mutates the Work nodes in the graph.
type WorkMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	thumbnail     *string
	clearedFields map[string]struct{}
	posts         map[int]struct{}
	removedposts  map[int]struct{}
	clearedposts  bool
	drafts        map[int]struct{}
	removeddrafts map[int]struct{}
	cleareddrafts bool
	done          bool
	oldValue      func(context.Context) (*Work, error)
	predicates    []predicate.Work
}

var _ ent.Mutation = (*WorkMutation)(nil)

// workOption allows management of the mutation configuration using functional options.
type workOption func(*WorkMutation)

// newWorkMutation creates new mutation for the Work entity.
func newWorkMutation(c config, op Op, opts ...workOption) *WorkMutation {
	m := &WorkMutation{
		config:        c,
		op:            op,
		typ:           TypeWork,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkID sets the ID field of the mutation.
func withWorkID(id int) workOption {
	return func(m *WorkMutation) {
		var (
			err   error
			once  sync.Once
			value *Work
		)
		m.oldValue = func(ctx context.Context) (*Work, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Work.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWork sets the old Work of the mutation.
func withWork(node *Work) workOption {
	return func(m *WorkMutation) {
		m.oldValue = func(context.Context) (*Work, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Work.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *WorkMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *WorkMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Work entity.
// If the Work object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *WorkMutation) ResetTitle() {
	m.title = nil
}

// SetThumbnail sets the "thumbnail" field.
func (m *WorkMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *WorkMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the Work entity.
// If the Work object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (m *WorkMutation) ClearThumbnail() {
	m.thumbnail = nil
	m.clearedFields[work.FieldThumbnail] = struct{}{}
}

// ThumbnailCleared returns if the "thumbnail" field was cleared in this mutation.
func (m *WorkMutation) ThumbnailCleared() bool {
	_, ok := m.clearedFields[work.FieldThumbnail]
	return ok
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *WorkMutation) ResetThumbnail() {
	m.thumbnail = nil
	delete(m.clearedFields, work.FieldThumbnail)
}

// AddPostIDs adds the "posts" edge to the Post entity by ids.
func (m *WorkMutation) AddPostIDs(ids ...int) {
	if m.posts == nil {
		m.posts = make(map[int]struct{})
	}
	for i := range ids {
		m.posts[ids[i]] = struct{}{}
	}
}

// ClearPosts clears the "posts" edge to the Post entity.
func (m *WorkMutation) ClearPosts() {
	m.clearedposts = true
}

// PostsCleared reports if the "posts" edge to the Post entity was cleared.
func (m *WorkMutation) PostsCleared() bool {
	return m.clearedposts
}

// RemovePostIDs removes the "posts" edge to the Post entity by IDs.
func (m *WorkMutation) RemovePostIDs(ids ...int) {
	if m.removedposts == nil {
		m.removedposts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.posts, ids[i])
		m.removedposts[ids[i]] = struct{}{}
	}
}

// RemovedPosts returns the removed IDs of the "posts" edge to the Post entity.
func (m *WorkMutation) RemovedPostsIDs() (ids []int) {
	for id := range m.removedposts {
		ids = append(ids, id)
	}
	return
}

// PostsIDs returns the "posts" edge IDs in the mutation.
func (m *WorkMutation) PostsIDs() (ids []int) {
	for id := range m.posts {
		ids = append(ids, id)
	}
	return
}

// ResetPosts resets all changes to the "posts" edge.
func (m *WorkMutation) ResetPosts() {
	m.posts = nil
	m.clearedposts = false
	m.removedposts = nil
}

// AddDraftIDs adds the "drafts" edge to the Draft entity by ids.
func (m *WorkMutation) AddDraftIDs(ids ...int) {
	if m.drafts == nil {
		m.drafts = make(map[int]struct{})
	}
	for i := range ids {
		m.drafts[ids[i]] = struct{}{}
	}
}

// ClearDrafts clears the "drafts" edge to the Draft entity.
func (m *WorkMutation) ClearDrafts() {
	m.cleareddrafts = true
}

// DraftsCleared reports if the "drafts" edge to the Draft entity was cleared.
func (m *WorkMutation) DraftsCleared() bool {
	return m.cleareddrafts
}

// RemoveDraftIDs removes the "drafts" edge to the Draft entity by IDs.
func (m *WorkMutation) RemoveDraftIDs(ids ...int) {
	if m.removeddrafts == nil {
		m.removeddrafts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.drafts, ids[i])
		m.removeddrafts[ids[i]] = struct{}{}
	}
}

// RemovedDrafts returns the removed IDs of the "drafts" edge to the Draft entity.
func (m *WorkMutation) RemovedDraftsIDs() (ids []int) {
	for id := range m.removeddrafts {
		ids = append(ids, id)
	}
	return
}

// DraftsIDs returns the "drafts" edge IDs in the mutation.
func (m *WorkMutation) DraftsIDs() (ids []int) {
	for id := range m.drafts {
		ids = append(ids, id)
	}
	return
}

// ResetDrafts resets all changes to the "drafts" edge.
func (m *WorkMutation) ResetDrafts() {
	m.drafts = nil
	m.cleareddrafts = false
	m.removeddrafts = nil
}

// Where appends a list predicates to the WorkMutation builder.
func (m *WorkMutation) Where(ps ...predicate.Work) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WorkMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Work).
func (m *WorkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.title != nil {
		fields = append(fields, work.FieldTitle)
	}
	if m.thumbnail != nil {
		fields = append(fields, work.FieldThumbnail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case work.FieldTitle:
		return m.Title()
	case work.FieldThumbnail:
		return m.Thumbnail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case work.FieldTitle:
		return m.OldTitle(ctx)
	case work.FieldThumbnail:
		return m.OldThumbnail(ctx)
	}
	return nil, fmt.Errorf("unknown Work field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case work.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case work.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	}
	return fmt.Errorf("unknown Work field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Work numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(work.FieldThumbnail) {
		fields = append(fields, work.FieldThumbnail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkMutation) ClearField(name string) error {
	switch name {
	case work.FieldThumbnail:
		m.ClearThumbnail()
		return nil
	}
	return fmt.Errorf("unknown Work nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkMutation) ResetField(name string) error {
	switch name {
	case work.FieldTitle:
		m.ResetTitle()
		return nil
	case work.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	}
	return fmt.Errorf("unknown Work field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.posts != nil {
		edges = append(edges, work.EdgePosts)
	}
	if m.drafts != nil {
		edges = append(edges, work.EdgeDrafts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case work.EdgePosts:
		ids := make([]ent.Value, 0, len(m.posts))
		for id := range m.posts {
			ids = append(ids, id)
		}
		return ids
	case work.EdgeDrafts:
		ids := make([]ent.Value, 0, len(m.drafts))
		for id := range m.drafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedposts != nil {
		edges = append(edges, work.EdgePosts)
	}
	if m.removeddrafts != nil {
		edges = append(edges, work.EdgeDrafts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case work.EdgePosts:
		ids := make([]ent.Value, 0, len(m.removedposts))
		for id := range m.removedposts {
			ids = append(ids, id)
		}
		return ids
	case work.EdgeDrafts:
		ids := make([]ent.Value, 0, len(m.removeddrafts))
		for id := range m.removeddrafts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedposts {
		edges = append(edges, work.EdgePosts)
	}
	if m.cleareddrafts {
		edges = append(edges, work.EdgeDrafts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkMutation) EdgeCleared(name string) bool {
	switch name {
	case work.EdgePosts:
		return m.clearedposts
	case work.EdgeDrafts:
		return m.cleareddrafts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Work unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkMutation) ResetEdge(name string) error {
	switch name {
	case work.EdgePosts:
		m.ResetPosts()
		return nil
	case work.EdgeDrafts:
		m.ResetDrafts()
		return nil
	}
	return fmt.Errorf("unknown Work edge %s", name)
}
