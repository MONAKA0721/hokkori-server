// Code generated by ent, DO NOT EDIT.

package bookmark

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/MONAKA0721/hokkori/ent/predicate"
)

// BookmarkedAt applies equality check predicate on the "bookmarked_at" field. It's identical to BookmarkedAtEQ.
func BookmarkedAt(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookmarkedAt), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// PostID applies equality check predicate on the "post_id" field. It's identical to PostIDEQ.
func PostID(v int) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostID), v))
	})
}

// BookmarkedAtEQ applies the EQ predicate on the "bookmarked_at" field.
func BookmarkedAtEQ(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBookmarkedAt), v))
	})
}

// BookmarkedAtNEQ applies the NEQ predicate on the "bookmarked_at" field.
func BookmarkedAtNEQ(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBookmarkedAt), v))
	})
}

// BookmarkedAtIn applies the In predicate on the "bookmarked_at" field.
func BookmarkedAtIn(vs ...time.Time) predicate.Bookmark {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBookmarkedAt), v...))
	})
}

// BookmarkedAtNotIn applies the NotIn predicate on the "bookmarked_at" field.
func BookmarkedAtNotIn(vs ...time.Time) predicate.Bookmark {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBookmarkedAt), v...))
	})
}

// BookmarkedAtGT applies the GT predicate on the "bookmarked_at" field.
func BookmarkedAtGT(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBookmarkedAt), v))
	})
}

// BookmarkedAtGTE applies the GTE predicate on the "bookmarked_at" field.
func BookmarkedAtGTE(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBookmarkedAt), v))
	})
}

// BookmarkedAtLT applies the LT predicate on the "bookmarked_at" field.
func BookmarkedAtLT(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBookmarkedAt), v))
	})
}

// BookmarkedAtLTE applies the LTE predicate on the "bookmarked_at" field.
func BookmarkedAtLTE(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBookmarkedAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Bookmark {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Bookmark {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// PostIDEQ applies the EQ predicate on the "post_id" field.
func PostIDEQ(v int) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostID), v))
	})
}

// PostIDNEQ applies the NEQ predicate on the "post_id" field.
func PostIDNEQ(v int) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostID), v))
	})
}

// PostIDIn applies the In predicate on the "post_id" field.
func PostIDIn(vs ...int) predicate.Bookmark {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPostID), v...))
	})
}

// PostIDNotIn applies the NotIn predicate on the "post_id" field.
func PostIDNotIn(vs ...int) predicate.Bookmark {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bookmark(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPostID), v...))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PostColumn),
			sqlgraph.To(PostInverseTable, PostFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PostColumn),
			sqlgraph.To(PostInverseTable, PostFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bookmark) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bookmark) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bookmark) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		p(s.Not())
	})
}
