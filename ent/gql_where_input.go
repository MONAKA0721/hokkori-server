// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/MONAKA0721/hokkori/ent/category"
	"github.com/MONAKA0721/hokkori/ent/draft"
	"github.com/MONAKA0721/hokkori/ent/hashtag"
	"github.com/MONAKA0721/hokkori/ent/post"
	"github.com/MONAKA0721/hokkori/ent/predicate"
	"github.com/MONAKA0721/hokkori/ent/user"
	"github.com/MONAKA0721/hokkori/ent/work"
)

// CategoryWhereInput represents a where input for filtering Category queries.
type CategoryWhereInput struct {
	Predicates []predicate.Category  `json:"-"`
	Not        *CategoryWhereInput   `json:"not,omitempty"`
	Or         []*CategoryWhereInput `json:"or,omitempty"`
	And        []*CategoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "post" edge predicates.
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`

	// "draft" edge predicates.
	HasDraft     *bool              `json:"hasDraft,omitempty"`
	HasDraftWith []*DraftWhereInput `json:"hasDraftWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CategoryWhereInput) AddPredicates(predicates ...predicate.Category) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CategoryWhereInput filter on the CategoryQuery builder.
func (i *CategoryWhereInput) Filter(q *CategoryQuery) (*CategoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCategoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCategoryWhereInput is returned in case the CategoryWhereInput is empty.
var ErrEmptyCategoryWhereInput = errors.New("ent: empty predicate CategoryWhereInput")

// P returns a predicate for filtering categories.
// An error is returned if the input is empty or invalid.
func (i *CategoryWhereInput) P() (predicate.Category, error) {
	var predicates []predicate.Category
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, category.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Category, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, category.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Category, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, category.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, category.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, category.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, category.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, category.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, category.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, category.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, category.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, category.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, category.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, category.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, category.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, category.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, category.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, category.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, category.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, category.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, category.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, category.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, category.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, category.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, category.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasPost != nil {
		p := category.HasPost()
		if !*i.HasPost {
			p = category.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostWith))
		for _, w := range i.HasPostWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, category.HasPostWith(with...))
	}
	if i.HasDraft != nil {
		p := category.HasDraft()
		if !*i.HasDraft {
			p = category.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDraftWith) > 0 {
		with := make([]predicate.Draft, 0, len(i.HasDraftWith))
		for _, w := range i.HasDraftWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDraftWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, category.HasDraftWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCategoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return category.And(predicates...), nil
	}
}

// DraftWhereInput represents a where input for filtering Draft queries.
type DraftWhereInput struct {
	Predicates []predicate.Draft  `json:"-"`
	Not        *DraftWhereInput   `json:"not,omitempty"`
	Or         []*DraftWhereInput `json:"or,omitempty"`
	And        []*DraftWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "praise_title" field predicates.
	PraiseTitle             *string  `json:"praiseTitle,omitempty"`
	PraiseTitleNEQ          *string  `json:"praiseTitleNEQ,omitempty"`
	PraiseTitleIn           []string `json:"praiseTitleIn,omitempty"`
	PraiseTitleNotIn        []string `json:"praiseTitleNotIn,omitempty"`
	PraiseTitleGT           *string  `json:"praiseTitleGT,omitempty"`
	PraiseTitleGTE          *string  `json:"praiseTitleGTE,omitempty"`
	PraiseTitleLT           *string  `json:"praiseTitleLT,omitempty"`
	PraiseTitleLTE          *string  `json:"praiseTitleLTE,omitempty"`
	PraiseTitleContains     *string  `json:"praiseTitleContains,omitempty"`
	PraiseTitleHasPrefix    *string  `json:"praiseTitleHasPrefix,omitempty"`
	PraiseTitleHasSuffix    *string  `json:"praiseTitleHasSuffix,omitempty"`
	PraiseTitleEqualFold    *string  `json:"praiseTitleEqualFold,omitempty"`
	PraiseTitleContainsFold *string  `json:"praiseTitleContainsFold,omitempty"`

	// "letter_title" field predicates.
	LetterTitle             *string  `json:"letterTitle,omitempty"`
	LetterTitleNEQ          *string  `json:"letterTitleNEQ,omitempty"`
	LetterTitleIn           []string `json:"letterTitleIn,omitempty"`
	LetterTitleNotIn        []string `json:"letterTitleNotIn,omitempty"`
	LetterTitleGT           *string  `json:"letterTitleGT,omitempty"`
	LetterTitleGTE          *string  `json:"letterTitleGTE,omitempty"`
	LetterTitleLT           *string  `json:"letterTitleLT,omitempty"`
	LetterTitleLTE          *string  `json:"letterTitleLTE,omitempty"`
	LetterTitleContains     *string  `json:"letterTitleContains,omitempty"`
	LetterTitleHasPrefix    *string  `json:"letterTitleHasPrefix,omitempty"`
	LetterTitleHasSuffix    *string  `json:"letterTitleHasSuffix,omitempty"`
	LetterTitleEqualFold    *string  `json:"letterTitleEqualFold,omitempty"`
	LetterTitleContainsFold *string  `json:"letterTitleContainsFold,omitempty"`

	// "praise_content" field predicates.
	PraiseContent             *string  `json:"praiseContent,omitempty"`
	PraiseContentNEQ          *string  `json:"praiseContentNEQ,omitempty"`
	PraiseContentIn           []string `json:"praiseContentIn,omitempty"`
	PraiseContentNotIn        []string `json:"praiseContentNotIn,omitempty"`
	PraiseContentGT           *string  `json:"praiseContentGT,omitempty"`
	PraiseContentGTE          *string  `json:"praiseContentGTE,omitempty"`
	PraiseContentLT           *string  `json:"praiseContentLT,omitempty"`
	PraiseContentLTE          *string  `json:"praiseContentLTE,omitempty"`
	PraiseContentContains     *string  `json:"praiseContentContains,omitempty"`
	PraiseContentHasPrefix    *string  `json:"praiseContentHasPrefix,omitempty"`
	PraiseContentHasSuffix    *string  `json:"praiseContentHasSuffix,omitempty"`
	PraiseContentEqualFold    *string  `json:"praiseContentEqualFold,omitempty"`
	PraiseContentContainsFold *string  `json:"praiseContentContainsFold,omitempty"`

	// "letter_content" field predicates.
	LetterContent             *string  `json:"letterContent,omitempty"`
	LetterContentNEQ          *string  `json:"letterContentNEQ,omitempty"`
	LetterContentIn           []string `json:"letterContentIn,omitempty"`
	LetterContentNotIn        []string `json:"letterContentNotIn,omitempty"`
	LetterContentGT           *string  `json:"letterContentGT,omitempty"`
	LetterContentGTE          *string  `json:"letterContentGTE,omitempty"`
	LetterContentLT           *string  `json:"letterContentLT,omitempty"`
	LetterContentLTE          *string  `json:"letterContentLTE,omitempty"`
	LetterContentContains     *string  `json:"letterContentContains,omitempty"`
	LetterContentHasPrefix    *string  `json:"letterContentHasPrefix,omitempty"`
	LetterContentHasSuffix    *string  `json:"letterContentHasSuffix,omitempty"`
	LetterContentEqualFold    *string  `json:"letterContentEqualFold,omitempty"`
	LetterContentContainsFold *string  `json:"letterContentContainsFold,omitempty"`

	// "praise_spoiled" field predicates.
	PraiseSpoiled    *bool `json:"praiseSpoiled,omitempty"`
	PraiseSpoiledNEQ *bool `json:"praiseSpoiledNEQ,omitempty"`

	// "letter_spoiled" field predicates.
	LetterSpoiled    *bool `json:"letterSpoiled,omitempty"`
	LetterSpoiledNEQ *bool `json:"letterSpoiledNEQ,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`

	// "hashtags" edge predicates.
	HasHashtags     *bool                `json:"hasHashtags,omitempty"`
	HasHashtagsWith []*HashtagWhereInput `json:"hasHashtagsWith,omitempty"`

	// "work" edge predicates.
	HasWork     *bool             `json:"hasWork,omitempty"`
	HasWorkWith []*WorkWhereInput `json:"hasWorkWith,omitempty"`

	// "category" edge predicates.
	HasCategory     *bool                 `json:"hasCategory,omitempty"`
	HasCategoryWith []*CategoryWhereInput `json:"hasCategoryWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DraftWhereInput) AddPredicates(predicates ...predicate.Draft) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DraftWhereInput filter on the DraftQuery builder.
func (i *DraftWhereInput) Filter(q *DraftQuery) (*DraftQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDraftWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDraftWhereInput is returned in case the DraftWhereInput is empty.
var ErrEmptyDraftWhereInput = errors.New("ent: empty predicate DraftWhereInput")

// P returns a predicate for filtering drafts.
// An error is returned if the input is empty or invalid.
func (i *DraftWhereInput) P() (predicate.Draft, error) {
	var predicates []predicate.Draft
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, draft.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Draft, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, draft.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Draft, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, draft.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, draft.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, draft.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, draft.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, draft.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, draft.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, draft.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, draft.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, draft.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, draft.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, draft.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, draft.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, draft.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, draft.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, draft.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, draft.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, draft.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, draft.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, draft.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, draft.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, draft.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, draft.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, draft.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, draft.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, draft.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.PraiseTitle != nil {
		predicates = append(predicates, draft.PraiseTitleEQ(*i.PraiseTitle))
	}
	if i.PraiseTitleNEQ != nil {
		predicates = append(predicates, draft.PraiseTitleNEQ(*i.PraiseTitleNEQ))
	}
	if len(i.PraiseTitleIn) > 0 {
		predicates = append(predicates, draft.PraiseTitleIn(i.PraiseTitleIn...))
	}
	if len(i.PraiseTitleNotIn) > 0 {
		predicates = append(predicates, draft.PraiseTitleNotIn(i.PraiseTitleNotIn...))
	}
	if i.PraiseTitleGT != nil {
		predicates = append(predicates, draft.PraiseTitleGT(*i.PraiseTitleGT))
	}
	if i.PraiseTitleGTE != nil {
		predicates = append(predicates, draft.PraiseTitleGTE(*i.PraiseTitleGTE))
	}
	if i.PraiseTitleLT != nil {
		predicates = append(predicates, draft.PraiseTitleLT(*i.PraiseTitleLT))
	}
	if i.PraiseTitleLTE != nil {
		predicates = append(predicates, draft.PraiseTitleLTE(*i.PraiseTitleLTE))
	}
	if i.PraiseTitleContains != nil {
		predicates = append(predicates, draft.PraiseTitleContains(*i.PraiseTitleContains))
	}
	if i.PraiseTitleHasPrefix != nil {
		predicates = append(predicates, draft.PraiseTitleHasPrefix(*i.PraiseTitleHasPrefix))
	}
	if i.PraiseTitleHasSuffix != nil {
		predicates = append(predicates, draft.PraiseTitleHasSuffix(*i.PraiseTitleHasSuffix))
	}
	if i.PraiseTitleEqualFold != nil {
		predicates = append(predicates, draft.PraiseTitleEqualFold(*i.PraiseTitleEqualFold))
	}
	if i.PraiseTitleContainsFold != nil {
		predicates = append(predicates, draft.PraiseTitleContainsFold(*i.PraiseTitleContainsFold))
	}
	if i.LetterTitle != nil {
		predicates = append(predicates, draft.LetterTitleEQ(*i.LetterTitle))
	}
	if i.LetterTitleNEQ != nil {
		predicates = append(predicates, draft.LetterTitleNEQ(*i.LetterTitleNEQ))
	}
	if len(i.LetterTitleIn) > 0 {
		predicates = append(predicates, draft.LetterTitleIn(i.LetterTitleIn...))
	}
	if len(i.LetterTitleNotIn) > 0 {
		predicates = append(predicates, draft.LetterTitleNotIn(i.LetterTitleNotIn...))
	}
	if i.LetterTitleGT != nil {
		predicates = append(predicates, draft.LetterTitleGT(*i.LetterTitleGT))
	}
	if i.LetterTitleGTE != nil {
		predicates = append(predicates, draft.LetterTitleGTE(*i.LetterTitleGTE))
	}
	if i.LetterTitleLT != nil {
		predicates = append(predicates, draft.LetterTitleLT(*i.LetterTitleLT))
	}
	if i.LetterTitleLTE != nil {
		predicates = append(predicates, draft.LetterTitleLTE(*i.LetterTitleLTE))
	}
	if i.LetterTitleContains != nil {
		predicates = append(predicates, draft.LetterTitleContains(*i.LetterTitleContains))
	}
	if i.LetterTitleHasPrefix != nil {
		predicates = append(predicates, draft.LetterTitleHasPrefix(*i.LetterTitleHasPrefix))
	}
	if i.LetterTitleHasSuffix != nil {
		predicates = append(predicates, draft.LetterTitleHasSuffix(*i.LetterTitleHasSuffix))
	}
	if i.LetterTitleEqualFold != nil {
		predicates = append(predicates, draft.LetterTitleEqualFold(*i.LetterTitleEqualFold))
	}
	if i.LetterTitleContainsFold != nil {
		predicates = append(predicates, draft.LetterTitleContainsFold(*i.LetterTitleContainsFold))
	}
	if i.PraiseContent != nil {
		predicates = append(predicates, draft.PraiseContentEQ(*i.PraiseContent))
	}
	if i.PraiseContentNEQ != nil {
		predicates = append(predicates, draft.PraiseContentNEQ(*i.PraiseContentNEQ))
	}
	if len(i.PraiseContentIn) > 0 {
		predicates = append(predicates, draft.PraiseContentIn(i.PraiseContentIn...))
	}
	if len(i.PraiseContentNotIn) > 0 {
		predicates = append(predicates, draft.PraiseContentNotIn(i.PraiseContentNotIn...))
	}
	if i.PraiseContentGT != nil {
		predicates = append(predicates, draft.PraiseContentGT(*i.PraiseContentGT))
	}
	if i.PraiseContentGTE != nil {
		predicates = append(predicates, draft.PraiseContentGTE(*i.PraiseContentGTE))
	}
	if i.PraiseContentLT != nil {
		predicates = append(predicates, draft.PraiseContentLT(*i.PraiseContentLT))
	}
	if i.PraiseContentLTE != nil {
		predicates = append(predicates, draft.PraiseContentLTE(*i.PraiseContentLTE))
	}
	if i.PraiseContentContains != nil {
		predicates = append(predicates, draft.PraiseContentContains(*i.PraiseContentContains))
	}
	if i.PraiseContentHasPrefix != nil {
		predicates = append(predicates, draft.PraiseContentHasPrefix(*i.PraiseContentHasPrefix))
	}
	if i.PraiseContentHasSuffix != nil {
		predicates = append(predicates, draft.PraiseContentHasSuffix(*i.PraiseContentHasSuffix))
	}
	if i.PraiseContentEqualFold != nil {
		predicates = append(predicates, draft.PraiseContentEqualFold(*i.PraiseContentEqualFold))
	}
	if i.PraiseContentContainsFold != nil {
		predicates = append(predicates, draft.PraiseContentContainsFold(*i.PraiseContentContainsFold))
	}
	if i.LetterContent != nil {
		predicates = append(predicates, draft.LetterContentEQ(*i.LetterContent))
	}
	if i.LetterContentNEQ != nil {
		predicates = append(predicates, draft.LetterContentNEQ(*i.LetterContentNEQ))
	}
	if len(i.LetterContentIn) > 0 {
		predicates = append(predicates, draft.LetterContentIn(i.LetterContentIn...))
	}
	if len(i.LetterContentNotIn) > 0 {
		predicates = append(predicates, draft.LetterContentNotIn(i.LetterContentNotIn...))
	}
	if i.LetterContentGT != nil {
		predicates = append(predicates, draft.LetterContentGT(*i.LetterContentGT))
	}
	if i.LetterContentGTE != nil {
		predicates = append(predicates, draft.LetterContentGTE(*i.LetterContentGTE))
	}
	if i.LetterContentLT != nil {
		predicates = append(predicates, draft.LetterContentLT(*i.LetterContentLT))
	}
	if i.LetterContentLTE != nil {
		predicates = append(predicates, draft.LetterContentLTE(*i.LetterContentLTE))
	}
	if i.LetterContentContains != nil {
		predicates = append(predicates, draft.LetterContentContains(*i.LetterContentContains))
	}
	if i.LetterContentHasPrefix != nil {
		predicates = append(predicates, draft.LetterContentHasPrefix(*i.LetterContentHasPrefix))
	}
	if i.LetterContentHasSuffix != nil {
		predicates = append(predicates, draft.LetterContentHasSuffix(*i.LetterContentHasSuffix))
	}
	if i.LetterContentEqualFold != nil {
		predicates = append(predicates, draft.LetterContentEqualFold(*i.LetterContentEqualFold))
	}
	if i.LetterContentContainsFold != nil {
		predicates = append(predicates, draft.LetterContentContainsFold(*i.LetterContentContainsFold))
	}
	if i.PraiseSpoiled != nil {
		predicates = append(predicates, draft.PraiseSpoiledEQ(*i.PraiseSpoiled))
	}
	if i.PraiseSpoiledNEQ != nil {
		predicates = append(predicates, draft.PraiseSpoiledNEQ(*i.PraiseSpoiledNEQ))
	}
	if i.LetterSpoiled != nil {
		predicates = append(predicates, draft.LetterSpoiledEQ(*i.LetterSpoiled))
	}
	if i.LetterSpoiledNEQ != nil {
		predicates = append(predicates, draft.LetterSpoiledNEQ(*i.LetterSpoiledNEQ))
	}

	if i.HasOwner != nil {
		p := draft.HasOwner()
		if !*i.HasOwner {
			p = draft.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, draft.HasOwnerWith(with...))
	}
	if i.HasHashtags != nil {
		p := draft.HasHashtags()
		if !*i.HasHashtags {
			p = draft.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasHashtagsWith) > 0 {
		with := make([]predicate.Hashtag, 0, len(i.HasHashtagsWith))
		for _, w := range i.HasHashtagsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasHashtagsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, draft.HasHashtagsWith(with...))
	}
	if i.HasWork != nil {
		p := draft.HasWork()
		if !*i.HasWork {
			p = draft.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkWith) > 0 {
		with := make([]predicate.Work, 0, len(i.HasWorkWith))
		for _, w := range i.HasWorkWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, draft.HasWorkWith(with...))
	}
	if i.HasCategory != nil {
		p := draft.HasCategory()
		if !*i.HasCategory {
			p = draft.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCategoryWith) > 0 {
		with := make([]predicate.Category, 0, len(i.HasCategoryWith))
		for _, w := range i.HasCategoryWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCategoryWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, draft.HasCategoryWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDraftWhereInput
	case 1:
		return predicates[0], nil
	default:
		return draft.And(predicates...), nil
	}
}

// HashtagWhereInput represents a where input for filtering Hashtag queries.
type HashtagWhereInput struct {
	Predicates []predicate.Hashtag  `json:"-"`
	Not        *HashtagWhereInput   `json:"not,omitempty"`
	Or         []*HashtagWhereInput `json:"or,omitempty"`
	And        []*HashtagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "drafts" edge predicates.
	HasDrafts     *bool              `json:"hasDrafts,omitempty"`
	HasDraftsWith []*DraftWhereInput `json:"hasDraftsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *HashtagWhereInput) AddPredicates(predicates ...predicate.Hashtag) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the HashtagWhereInput filter on the HashtagQuery builder.
func (i *HashtagWhereInput) Filter(q *HashtagQuery) (*HashtagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyHashtagWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyHashtagWhereInput is returned in case the HashtagWhereInput is empty.
var ErrEmptyHashtagWhereInput = errors.New("ent: empty predicate HashtagWhereInput")

// P returns a predicate for filtering hashtags.
// An error is returned if the input is empty or invalid.
func (i *HashtagWhereInput) P() (predicate.Hashtag, error) {
	var predicates []predicate.Hashtag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, hashtag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Hashtag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, hashtag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Hashtag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, hashtag.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, hashtag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, hashtag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, hashtag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, hashtag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, hashtag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, hashtag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, hashtag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, hashtag.IDLTE(*i.IDLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, hashtag.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, hashtag.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, hashtag.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, hashtag.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, hashtag.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, hashtag.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, hashtag.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, hashtag.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, hashtag.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, hashtag.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, hashtag.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, hashtag.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, hashtag.TitleContainsFold(*i.TitleContainsFold))
	}

	if i.HasPosts != nil {
		p := hashtag.HasPosts()
		if !*i.HasPosts {
			p = hashtag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, hashtag.HasPostsWith(with...))
	}
	if i.HasDrafts != nil {
		p := hashtag.HasDrafts()
		if !*i.HasDrafts {
			p = hashtag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDraftsWith) > 0 {
		with := make([]predicate.Draft, 0, len(i.HasDraftsWith))
		for _, w := range i.HasDraftsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDraftsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, hashtag.HasDraftsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyHashtagWhereInput
	case 1:
		return predicates[0], nil
	default:
		return hashtag.And(predicates...), nil
	}
}

// PostWhereInput represents a where input for filtering Post queries.
type PostWhereInput struct {
	Predicates []predicate.Post  `json:"-"`
	Not        *PostWhereInput   `json:"not,omitempty"`
	Or         []*PostWhereInput `json:"or,omitempty"`
	And        []*PostWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "type" field predicates.
	Type      *post.Type  `json:"type,omitempty"`
	TypeNEQ   *post.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []post.Type `json:"typeIn,omitempty"`
	TypeNotIn []post.Type `json:"typeNotIn,omitempty"`

	// "spoiled" field predicates.
	Spoiled    *bool `json:"spoiled,omitempty"`
	SpoiledNEQ *bool `json:"spoiledNEQ,omitempty"`

	// "thumbnail" field predicates.
	Thumbnail             *string  `json:"thumbnail,omitempty"`
	ThumbnailNEQ          *string  `json:"thumbnailNEQ,omitempty"`
	ThumbnailIn           []string `json:"thumbnailIn,omitempty"`
	ThumbnailNotIn        []string `json:"thumbnailNotIn,omitempty"`
	ThumbnailGT           *string  `json:"thumbnailGT,omitempty"`
	ThumbnailGTE          *string  `json:"thumbnailGTE,omitempty"`
	ThumbnailLT           *string  `json:"thumbnailLT,omitempty"`
	ThumbnailLTE          *string  `json:"thumbnailLTE,omitempty"`
	ThumbnailContains     *string  `json:"thumbnailContains,omitempty"`
	ThumbnailHasPrefix    *string  `json:"thumbnailHasPrefix,omitempty"`
	ThumbnailHasSuffix    *string  `json:"thumbnailHasSuffix,omitempty"`
	ThumbnailIsNil        bool     `json:"thumbnailIsNil,omitempty"`
	ThumbnailNotNil       bool     `json:"thumbnailNotNil,omitempty"`
	ThumbnailEqualFold    *string  `json:"thumbnailEqualFold,omitempty"`
	ThumbnailContainsFold *string  `json:"thumbnailContainsFold,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`

	// "hashtags" edge predicates.
	HasHashtags     *bool                `json:"hasHashtags,omitempty"`
	HasHashtagsWith []*HashtagWhereInput `json:"hasHashtagsWith,omitempty"`

	// "work" edge predicates.
	HasWork     *bool             `json:"hasWork,omitempty"`
	HasWorkWith []*WorkWhereInput `json:"hasWorkWith,omitempty"`

	// "category" edge predicates.
	HasCategory     *bool                 `json:"hasCategory,omitempty"`
	HasCategoryWith []*CategoryWhereInput `json:"hasCategoryWith,omitempty"`

	// "liked_users" edge predicates.
	HasLikedUsers     *bool             `json:"hasLikedUsers,omitempty"`
	HasLikedUsersWith []*UserWhereInput `json:"hasLikedUsersWith,omitempty"`

	// "bookmarked_users" edge predicates.
	HasBookmarkedUsers     *bool             `json:"hasBookmarkedUsers,omitempty"`
	HasBookmarkedUsersWith []*UserWhereInput `json:"hasBookmarkedUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostWhereInput) AddPredicates(predicates ...predicate.Post) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostWhereInput filter on the PostQuery builder.
func (i *PostWhereInput) Filter(q *PostQuery) (*PostQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostWhereInput is returned in case the PostWhereInput is empty.
var ErrEmptyPostWhereInput = errors.New("ent: empty predicate PostWhereInput")

// P returns a predicate for filtering posts.
// An error is returned if the input is empty or invalid.
func (i *PostWhereInput) P() (predicate.Post, error) {
	var predicates []predicate.Post
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, post.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Post, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, post.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Post, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, post.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, post.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, post.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, post.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, post.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, post.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, post.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, post.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, post.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, post.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, post.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, post.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, post.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, post.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, post.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, post.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, post.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, post.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, post.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, post.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, post.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, post.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, post.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, post.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, post.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, post.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, post.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, post.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, post.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, post.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, post.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, post.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, post.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, post.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, post.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, post.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, post.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, post.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, post.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, post.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, post.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, post.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, post.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, post.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, post.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, post.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, post.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, post.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, post.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, post.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, post.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, post.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, post.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, post.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, post.TypeNotIn(i.TypeNotIn...))
	}
	if i.Spoiled != nil {
		predicates = append(predicates, post.SpoiledEQ(*i.Spoiled))
	}
	if i.SpoiledNEQ != nil {
		predicates = append(predicates, post.SpoiledNEQ(*i.SpoiledNEQ))
	}
	if i.Thumbnail != nil {
		predicates = append(predicates, post.ThumbnailEQ(*i.Thumbnail))
	}
	if i.ThumbnailNEQ != nil {
		predicates = append(predicates, post.ThumbnailNEQ(*i.ThumbnailNEQ))
	}
	if len(i.ThumbnailIn) > 0 {
		predicates = append(predicates, post.ThumbnailIn(i.ThumbnailIn...))
	}
	if len(i.ThumbnailNotIn) > 0 {
		predicates = append(predicates, post.ThumbnailNotIn(i.ThumbnailNotIn...))
	}
	if i.ThumbnailGT != nil {
		predicates = append(predicates, post.ThumbnailGT(*i.ThumbnailGT))
	}
	if i.ThumbnailGTE != nil {
		predicates = append(predicates, post.ThumbnailGTE(*i.ThumbnailGTE))
	}
	if i.ThumbnailLT != nil {
		predicates = append(predicates, post.ThumbnailLT(*i.ThumbnailLT))
	}
	if i.ThumbnailLTE != nil {
		predicates = append(predicates, post.ThumbnailLTE(*i.ThumbnailLTE))
	}
	if i.ThumbnailContains != nil {
		predicates = append(predicates, post.ThumbnailContains(*i.ThumbnailContains))
	}
	if i.ThumbnailHasPrefix != nil {
		predicates = append(predicates, post.ThumbnailHasPrefix(*i.ThumbnailHasPrefix))
	}
	if i.ThumbnailHasSuffix != nil {
		predicates = append(predicates, post.ThumbnailHasSuffix(*i.ThumbnailHasSuffix))
	}
	if i.ThumbnailIsNil {
		predicates = append(predicates, post.ThumbnailIsNil())
	}
	if i.ThumbnailNotNil {
		predicates = append(predicates, post.ThumbnailNotNil())
	}
	if i.ThumbnailEqualFold != nil {
		predicates = append(predicates, post.ThumbnailEqualFold(*i.ThumbnailEqualFold))
	}
	if i.ThumbnailContainsFold != nil {
		predicates = append(predicates, post.ThumbnailContainsFold(*i.ThumbnailContainsFold))
	}

	if i.HasOwner != nil {
		p := post.HasOwner()
		if !*i.HasOwner {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasOwnerWith(with...))
	}
	if i.HasHashtags != nil {
		p := post.HasHashtags()
		if !*i.HasHashtags {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasHashtagsWith) > 0 {
		with := make([]predicate.Hashtag, 0, len(i.HasHashtagsWith))
		for _, w := range i.HasHashtagsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasHashtagsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasHashtagsWith(with...))
	}
	if i.HasWork != nil {
		p := post.HasWork()
		if !*i.HasWork {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkWith) > 0 {
		with := make([]predicate.Work, 0, len(i.HasWorkWith))
		for _, w := range i.HasWorkWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasWorkWith(with...))
	}
	if i.HasCategory != nil {
		p := post.HasCategory()
		if !*i.HasCategory {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCategoryWith) > 0 {
		with := make([]predicate.Category, 0, len(i.HasCategoryWith))
		for _, w := range i.HasCategoryWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCategoryWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasCategoryWith(with...))
	}
	if i.HasLikedUsers != nil {
		p := post.HasLikedUsers()
		if !*i.HasLikedUsers {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikedUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasLikedUsersWith))
		for _, w := range i.HasLikedUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikedUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasLikedUsersWith(with...))
	}
	if i.HasBookmarkedUsers != nil {
		p := post.HasBookmarkedUsers()
		if !*i.HasBookmarkedUsers {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBookmarkedUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasBookmarkedUsersWith))
		for _, w := range i.HasBookmarkedUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBookmarkedUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasBookmarkedUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostWhereInput
	case 1:
		return predicates[0], nil
	default:
		return post.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameIsNil        bool     `json:"usernameIsNil,omitempty"`
	UsernameNotNil       bool     `json:"usernameNotNil,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "profile" field predicates.
	Profile             *string  `json:"profile,omitempty"`
	ProfileNEQ          *string  `json:"profileNEQ,omitempty"`
	ProfileIn           []string `json:"profileIn,omitempty"`
	ProfileNotIn        []string `json:"profileNotIn,omitempty"`
	ProfileGT           *string  `json:"profileGT,omitempty"`
	ProfileGTE          *string  `json:"profileGTE,omitempty"`
	ProfileLT           *string  `json:"profileLT,omitempty"`
	ProfileLTE          *string  `json:"profileLTE,omitempty"`
	ProfileContains     *string  `json:"profileContains,omitempty"`
	ProfileHasPrefix    *string  `json:"profileHasPrefix,omitempty"`
	ProfileHasSuffix    *string  `json:"profileHasSuffix,omitempty"`
	ProfileIsNil        bool     `json:"profileIsNil,omitempty"`
	ProfileNotNil       bool     `json:"profileNotNil,omitempty"`
	ProfileEqualFold    *string  `json:"profileEqualFold,omitempty"`
	ProfileContainsFold *string  `json:"profileContainsFold,omitempty"`

	// "avatar_url" field predicates.
	AvatarURL             *string  `json:"avatarURL,omitempty"`
	AvatarURLNEQ          *string  `json:"avatarURLNEQ,omitempty"`
	AvatarURLIn           []string `json:"avatarURLIn,omitempty"`
	AvatarURLNotIn        []string `json:"avatarURLNotIn,omitempty"`
	AvatarURLGT           *string  `json:"avatarURLGT,omitempty"`
	AvatarURLGTE          *string  `json:"avatarURLGTE,omitempty"`
	AvatarURLLT           *string  `json:"avatarURLLT,omitempty"`
	AvatarURLLTE          *string  `json:"avatarURLLTE,omitempty"`
	AvatarURLContains     *string  `json:"avatarURLContains,omitempty"`
	AvatarURLHasPrefix    *string  `json:"avatarURLHasPrefix,omitempty"`
	AvatarURLHasSuffix    *string  `json:"avatarURLHasSuffix,omitempty"`
	AvatarURLIsNil        bool     `json:"avatarURLIsNil,omitempty"`
	AvatarURLNotNil       bool     `json:"avatarURLNotNil,omitempty"`
	AvatarURLEqualFold    *string  `json:"avatarURLEqualFold,omitempty"`
	AvatarURLContainsFold *string  `json:"avatarURLContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "liked_posts" edge predicates.
	HasLikedPosts     *bool             `json:"hasLikedPosts,omitempty"`
	HasLikedPostsWith []*PostWhereInput `json:"hasLikedPostsWith,omitempty"`

	// "bookmarked_posts" edge predicates.
	HasBookmarkedPosts     *bool             `json:"hasBookmarkedPosts,omitempty"`
	HasBookmarkedPostsWith []*PostWhereInput `json:"hasBookmarkedPostsWith,omitempty"`

	// "followers" edge predicates.
	HasFollowers     *bool             `json:"hasFollowers,omitempty"`
	HasFollowersWith []*UserWhereInput `json:"hasFollowersWith,omitempty"`

	// "following" edge predicates.
	HasFollowing     *bool             `json:"hasFollowing,omitempty"`
	HasFollowingWith []*UserWhereInput `json:"hasFollowingWith,omitempty"`

	// "drafts" edge predicates.
	HasDrafts     *bool              `json:"hasDrafts,omitempty"`
	HasDraftsWith []*DraftWhereInput `json:"hasDraftsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameIsNil {
		predicates = append(predicates, user.UsernameIsNil())
	}
	if i.UsernameNotNil {
		predicates = append(predicates, user.UsernameNotNil())
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.Profile != nil {
		predicates = append(predicates, user.ProfileEQ(*i.Profile))
	}
	if i.ProfileNEQ != nil {
		predicates = append(predicates, user.ProfileNEQ(*i.ProfileNEQ))
	}
	if len(i.ProfileIn) > 0 {
		predicates = append(predicates, user.ProfileIn(i.ProfileIn...))
	}
	if len(i.ProfileNotIn) > 0 {
		predicates = append(predicates, user.ProfileNotIn(i.ProfileNotIn...))
	}
	if i.ProfileGT != nil {
		predicates = append(predicates, user.ProfileGT(*i.ProfileGT))
	}
	if i.ProfileGTE != nil {
		predicates = append(predicates, user.ProfileGTE(*i.ProfileGTE))
	}
	if i.ProfileLT != nil {
		predicates = append(predicates, user.ProfileLT(*i.ProfileLT))
	}
	if i.ProfileLTE != nil {
		predicates = append(predicates, user.ProfileLTE(*i.ProfileLTE))
	}
	if i.ProfileContains != nil {
		predicates = append(predicates, user.ProfileContains(*i.ProfileContains))
	}
	if i.ProfileHasPrefix != nil {
		predicates = append(predicates, user.ProfileHasPrefix(*i.ProfileHasPrefix))
	}
	if i.ProfileHasSuffix != nil {
		predicates = append(predicates, user.ProfileHasSuffix(*i.ProfileHasSuffix))
	}
	if i.ProfileIsNil {
		predicates = append(predicates, user.ProfileIsNil())
	}
	if i.ProfileNotNil {
		predicates = append(predicates, user.ProfileNotNil())
	}
	if i.ProfileEqualFold != nil {
		predicates = append(predicates, user.ProfileEqualFold(*i.ProfileEqualFold))
	}
	if i.ProfileContainsFold != nil {
		predicates = append(predicates, user.ProfileContainsFold(*i.ProfileContainsFold))
	}
	if i.AvatarURL != nil {
		predicates = append(predicates, user.AvatarURLEQ(*i.AvatarURL))
	}
	if i.AvatarURLNEQ != nil {
		predicates = append(predicates, user.AvatarURLNEQ(*i.AvatarURLNEQ))
	}
	if len(i.AvatarURLIn) > 0 {
		predicates = append(predicates, user.AvatarURLIn(i.AvatarURLIn...))
	}
	if len(i.AvatarURLNotIn) > 0 {
		predicates = append(predicates, user.AvatarURLNotIn(i.AvatarURLNotIn...))
	}
	if i.AvatarURLGT != nil {
		predicates = append(predicates, user.AvatarURLGT(*i.AvatarURLGT))
	}
	if i.AvatarURLGTE != nil {
		predicates = append(predicates, user.AvatarURLGTE(*i.AvatarURLGTE))
	}
	if i.AvatarURLLT != nil {
		predicates = append(predicates, user.AvatarURLLT(*i.AvatarURLLT))
	}
	if i.AvatarURLLTE != nil {
		predicates = append(predicates, user.AvatarURLLTE(*i.AvatarURLLTE))
	}
	if i.AvatarURLContains != nil {
		predicates = append(predicates, user.AvatarURLContains(*i.AvatarURLContains))
	}
	if i.AvatarURLHasPrefix != nil {
		predicates = append(predicates, user.AvatarURLHasPrefix(*i.AvatarURLHasPrefix))
	}
	if i.AvatarURLHasSuffix != nil {
		predicates = append(predicates, user.AvatarURLHasSuffix(*i.AvatarURLHasSuffix))
	}
	if i.AvatarURLIsNil {
		predicates = append(predicates, user.AvatarURLIsNil())
	}
	if i.AvatarURLNotNil {
		predicates = append(predicates, user.AvatarURLNotNil())
	}
	if i.AvatarURLEqualFold != nil {
		predicates = append(predicates, user.AvatarURLEqualFold(*i.AvatarURLEqualFold))
	}
	if i.AvatarURLContainsFold != nil {
		predicates = append(predicates, user.AvatarURLContainsFold(*i.AvatarURLContainsFold))
	}

	if i.HasPosts != nil {
		p := user.HasPosts()
		if !*i.HasPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPostsWith(with...))
	}
	if i.HasLikedPosts != nil {
		p := user.HasLikedPosts()
		if !*i.HasLikedPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikedPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasLikedPostsWith))
		for _, w := range i.HasLikedPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikedPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasLikedPostsWith(with...))
	}
	if i.HasBookmarkedPosts != nil {
		p := user.HasBookmarkedPosts()
		if !*i.HasBookmarkedPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBookmarkedPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasBookmarkedPostsWith))
		for _, w := range i.HasBookmarkedPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBookmarkedPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasBookmarkedPostsWith(with...))
	}
	if i.HasFollowers != nil {
		p := user.HasFollowers()
		if !*i.HasFollowers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowersWith))
		for _, w := range i.HasFollowersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowersWith(with...))
	}
	if i.HasFollowing != nil {
		p := user.HasFollowing()
		if !*i.HasFollowing {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowingWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowingWith))
		for _, w := range i.HasFollowingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowingWith(with...))
	}
	if i.HasDrafts != nil {
		p := user.HasDrafts()
		if !*i.HasDrafts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDraftsWith) > 0 {
		with := make([]predicate.Draft, 0, len(i.HasDraftsWith))
		for _, w := range i.HasDraftsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDraftsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasDraftsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}

// WorkWhereInput represents a where input for filtering Work queries.
type WorkWhereInput struct {
	Predicates []predicate.Work  `json:"-"`
	Not        *WorkWhereInput   `json:"not,omitempty"`
	Or         []*WorkWhereInput `json:"or,omitempty"`
	And        []*WorkWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "thumbnail" field predicates.
	Thumbnail             *string  `json:"thumbnail,omitempty"`
	ThumbnailNEQ          *string  `json:"thumbnailNEQ,omitempty"`
	ThumbnailIn           []string `json:"thumbnailIn,omitempty"`
	ThumbnailNotIn        []string `json:"thumbnailNotIn,omitempty"`
	ThumbnailGT           *string  `json:"thumbnailGT,omitempty"`
	ThumbnailGTE          *string  `json:"thumbnailGTE,omitempty"`
	ThumbnailLT           *string  `json:"thumbnailLT,omitempty"`
	ThumbnailLTE          *string  `json:"thumbnailLTE,omitempty"`
	ThumbnailContains     *string  `json:"thumbnailContains,omitempty"`
	ThumbnailHasPrefix    *string  `json:"thumbnailHasPrefix,omitempty"`
	ThumbnailHasSuffix    *string  `json:"thumbnailHasSuffix,omitempty"`
	ThumbnailIsNil        bool     `json:"thumbnailIsNil,omitempty"`
	ThumbnailNotNil       bool     `json:"thumbnailNotNil,omitempty"`
	ThumbnailEqualFold    *string  `json:"thumbnailEqualFold,omitempty"`
	ThumbnailContainsFold *string  `json:"thumbnailContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "drafts" edge predicates.
	HasDrafts     *bool              `json:"hasDrafts,omitempty"`
	HasDraftsWith []*DraftWhereInput `json:"hasDraftsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *WorkWhereInput) AddPredicates(predicates ...predicate.Work) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the WorkWhereInput filter on the WorkQuery builder.
func (i *WorkWhereInput) Filter(q *WorkQuery) (*WorkQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyWorkWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyWorkWhereInput is returned in case the WorkWhereInput is empty.
var ErrEmptyWorkWhereInput = errors.New("ent: empty predicate WorkWhereInput")

// P returns a predicate for filtering works.
// An error is returned if the input is empty or invalid.
func (i *WorkWhereInput) P() (predicate.Work, error) {
	var predicates []predicate.Work
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, work.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Work, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, work.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Work, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, work.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, work.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, work.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, work.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, work.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, work.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, work.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, work.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, work.IDLTE(*i.IDLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, work.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, work.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, work.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, work.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, work.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, work.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, work.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, work.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, work.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, work.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, work.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, work.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, work.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Thumbnail != nil {
		predicates = append(predicates, work.ThumbnailEQ(*i.Thumbnail))
	}
	if i.ThumbnailNEQ != nil {
		predicates = append(predicates, work.ThumbnailNEQ(*i.ThumbnailNEQ))
	}
	if len(i.ThumbnailIn) > 0 {
		predicates = append(predicates, work.ThumbnailIn(i.ThumbnailIn...))
	}
	if len(i.ThumbnailNotIn) > 0 {
		predicates = append(predicates, work.ThumbnailNotIn(i.ThumbnailNotIn...))
	}
	if i.ThumbnailGT != nil {
		predicates = append(predicates, work.ThumbnailGT(*i.ThumbnailGT))
	}
	if i.ThumbnailGTE != nil {
		predicates = append(predicates, work.ThumbnailGTE(*i.ThumbnailGTE))
	}
	if i.ThumbnailLT != nil {
		predicates = append(predicates, work.ThumbnailLT(*i.ThumbnailLT))
	}
	if i.ThumbnailLTE != nil {
		predicates = append(predicates, work.ThumbnailLTE(*i.ThumbnailLTE))
	}
	if i.ThumbnailContains != nil {
		predicates = append(predicates, work.ThumbnailContains(*i.ThumbnailContains))
	}
	if i.ThumbnailHasPrefix != nil {
		predicates = append(predicates, work.ThumbnailHasPrefix(*i.ThumbnailHasPrefix))
	}
	if i.ThumbnailHasSuffix != nil {
		predicates = append(predicates, work.ThumbnailHasSuffix(*i.ThumbnailHasSuffix))
	}
	if i.ThumbnailIsNil {
		predicates = append(predicates, work.ThumbnailIsNil())
	}
	if i.ThumbnailNotNil {
		predicates = append(predicates, work.ThumbnailNotNil())
	}
	if i.ThumbnailEqualFold != nil {
		predicates = append(predicates, work.ThumbnailEqualFold(*i.ThumbnailEqualFold))
	}
	if i.ThumbnailContainsFold != nil {
		predicates = append(predicates, work.ThumbnailContainsFold(*i.ThumbnailContainsFold))
	}

	if i.HasPosts != nil {
		p := work.HasPosts()
		if !*i.HasPosts {
			p = work.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, work.HasPostsWith(with...))
	}
	if i.HasDrafts != nil {
		p := work.HasDrafts()
		if !*i.HasDrafts {
			p = work.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDraftsWith) > 0 {
		with := make([]predicate.Draft, 0, len(i.HasDraftsWith))
		for _, w := range i.HasDraftsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDraftsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, work.HasDraftsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyWorkWhereInput
	case 1:
		return predicates[0], nil
	default:
		return work.And(predicates...), nil
	}
}
