// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/MONAKA0721/hokkori/ent/letter"
)

// Letter is the model entity for the Letter schema.
type Letter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Letter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case letter.FieldID:
			values[i] = new(sql.NullInt64)
		case letter.FieldContent:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Letter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Letter fields.
func (l *Letter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case letter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case letter.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				l.Content = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Letter.
// Note that you need to call Letter.Unwrap() before calling this method if this Letter
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Letter) Update() *LetterUpdateOne {
	return (&LetterClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Letter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Letter) Unwrap() *Letter {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Letter is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Letter) String() string {
	var builder strings.Builder
	builder.WriteString("Letter(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", content=")
	builder.WriteString(l.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Letters is a parsable slice of Letter.
type Letters []*Letter

func (l Letters) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
