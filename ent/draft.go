// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MONAKA0721/hokkori/ent/category"
	"github.com/MONAKA0721/hokkori/ent/draft"
	"github.com/MONAKA0721/hokkori/ent/user"
	"github.com/MONAKA0721/hokkori/ent/work"
)

// Draft is the model entity for the Draft schema.
type Draft struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// PraiseTitle holds the value of the "praise_title" field.
	PraiseTitle string `json:"praise_title,omitempty"`
	// LetterTitle holds the value of the "letter_title" field.
	LetterTitle string `json:"letter_title,omitempty"`
	// PraiseContent holds the value of the "praise_content" field.
	PraiseContent string `json:"praise_content,omitempty"`
	// LetterContent holds the value of the "letter_content" field.
	LetterContent string `json:"letter_content,omitempty"`
	// PraiseSpoiled holds the value of the "praise_spoiled" field.
	PraiseSpoiled bool `json:"praise_spoiled,omitempty"`
	// LetterSpoiled holds the value of the "letter_spoiled" field.
	LetterSpoiled bool `json:"letter_spoiled,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DraftQuery when eager-loading is set.
	Edges          DraftEdges `json:"edges"`
	draft_category *int
	user_drafts    *int
	work_drafts    *int
}

// DraftEdges holds the relations/edges for other nodes in the graph.
type DraftEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Hashtags holds the value of the hashtags edge.
	Hashtags []*Hashtag `json:"hashtags,omitempty"`
	// Work holds the value of the work edge.
	Work *Work `json:"work,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]*int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DraftEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// HashtagsOrErr returns the Hashtags value or an error if the edge
// was not loaded in eager-loading.
func (e DraftEdges) HashtagsOrErr() ([]*Hashtag, error) {
	if e.loadedTypes[1] {
		return e.Hashtags, nil
	}
	return nil, &NotLoadedError{edge: "hashtags"}
}

// WorkOrErr returns the Work value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DraftEdges) WorkOrErr() (*Work, error) {
	if e.loadedTypes[2] {
		if e.Work == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: work.Label}
		}
		return e.Work, nil
	}
	return nil, &NotLoadedError{edge: "work"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DraftEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[3] {
		if e.Category == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Draft) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case draft.FieldPraiseSpoiled, draft.FieldLetterSpoiled:
			values[i] = new(sql.NullBool)
		case draft.FieldID:
			values[i] = new(sql.NullInt64)
		case draft.FieldPraiseTitle, draft.FieldLetterTitle, draft.FieldPraiseContent, draft.FieldLetterContent:
			values[i] = new(sql.NullString)
		case draft.FieldCreateTime, draft.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case draft.ForeignKeys[0]: // draft_category
			values[i] = new(sql.NullInt64)
		case draft.ForeignKeys[1]: // user_drafts
			values[i] = new(sql.NullInt64)
		case draft.ForeignKeys[2]: // work_drafts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Draft", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Draft fields.
func (d *Draft) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case draft.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case draft.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		case draft.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				d.UpdateTime = value.Time
			}
		case draft.FieldPraiseTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field praise_title", values[i])
			} else if value.Valid {
				d.PraiseTitle = value.String
			}
		case draft.FieldLetterTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field letter_title", values[i])
			} else if value.Valid {
				d.LetterTitle = value.String
			}
		case draft.FieldPraiseContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field praise_content", values[i])
			} else if value.Valid {
				d.PraiseContent = value.String
			}
		case draft.FieldLetterContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field letter_content", values[i])
			} else if value.Valid {
				d.LetterContent = value.String
			}
		case draft.FieldPraiseSpoiled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field praise_spoiled", values[i])
			} else if value.Valid {
				d.PraiseSpoiled = value.Bool
			}
		case draft.FieldLetterSpoiled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field letter_spoiled", values[i])
			} else if value.Valid {
				d.LetterSpoiled = value.Bool
			}
		case draft.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field draft_category", value)
			} else if value.Valid {
				d.draft_category = new(int)
				*d.draft_category = int(value.Int64)
			}
		case draft.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_drafts", value)
			} else if value.Valid {
				d.user_drafts = new(int)
				*d.user_drafts = int(value.Int64)
			}
		case draft.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_drafts", value)
			} else if value.Valid {
				d.work_drafts = new(int)
				*d.work_drafts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Draft entity.
func (d *Draft) QueryOwner() *UserQuery {
	return (&DraftClient{config: d.config}).QueryOwner(d)
}

// QueryHashtags queries the "hashtags" edge of the Draft entity.
func (d *Draft) QueryHashtags() *HashtagQuery {
	return (&DraftClient{config: d.config}).QueryHashtags(d)
}

// QueryWork queries the "work" edge of the Draft entity.
func (d *Draft) QueryWork() *WorkQuery {
	return (&DraftClient{config: d.config}).QueryWork(d)
}

// QueryCategory queries the "category" edge of the Draft entity.
func (d *Draft) QueryCategory() *CategoryQuery {
	return (&DraftClient{config: d.config}).QueryCategory(d)
}

// Update returns a builder for updating this Draft.
// Note that you need to call Draft.Unwrap() before calling this method if this Draft
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Draft) Update() *DraftUpdateOne {
	return (&DraftClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Draft entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Draft) Unwrap() *Draft {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Draft is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Draft) String() string {
	var builder strings.Builder
	builder.WriteString("Draft(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("praise_title=")
	builder.WriteString(d.PraiseTitle)
	builder.WriteString(", ")
	builder.WriteString("letter_title=")
	builder.WriteString(d.LetterTitle)
	builder.WriteString(", ")
	builder.WriteString("praise_content=")
	builder.WriteString(d.PraiseContent)
	builder.WriteString(", ")
	builder.WriteString("letter_content=")
	builder.WriteString(d.LetterContent)
	builder.WriteString(", ")
	builder.WriteString("praise_spoiled=")
	builder.WriteString(fmt.Sprintf("%v", d.PraiseSpoiled))
	builder.WriteString(", ")
	builder.WriteString("letter_spoiled=")
	builder.WriteString(fmt.Sprintf("%v", d.LetterSpoiled))
	builder.WriteByte(')')
	return builder.String()
}

// Drafts is a parsable slice of Draft.
type Drafts []*Draft

func (d Drafts) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
